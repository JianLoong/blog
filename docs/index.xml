<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Contents on Jian Liew</title><link>https://jianliew.me/blog/</link><description>Recent content in Contents on Jian Liew</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 04 Nov 2019 00:00:00 +1100</lastBuildDate><atom:link href="https://jianliew.me/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Explicit Else (Guard)</title><link>https://jianliew.me/blog/blog/october-2019/guard/</link><pubDate>Tue, 01 Oct 2019 20:56:02 +1100</pubDate><guid>https://jianliew.me/blog/blog/october-2019/guard/</guid><description>Before we start, lets take a look at the grammar of a guard statement for the Swift language.
Grammar of a Guard Statement
guard-statement &amp;ndash;&amp;gt; guard condition-list else code-block
This was a conversation I had with a co-worker a couple of days back. I asked him, what is this guard in Swift? I have not been programming in Swift since iOS development made a shift from Objective C to Swift and I have not seen a guard statement used in any other languages I programmed in.</description></item><item><title>Nested Data in Documents (FireStore)</title><link>https://jianliew.me/blog/blog/november-2019/firestore/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jianliew.me/blog/blog/november-2019/firestore/</guid><description>When using Google Firestore, there is a need to put some thought into the way the data is structure. Each option would have an advantage or limitations depending on the use case.
With JSON being everywhere, there are times when there is a need to figure out how to structure data in the Cloud Firestore.
Here are a few common options.
Nested data in documents Subcollections Root-level The most important thing to remember that there is no perfect solution for structuring a Cloud Firestore database.</description></item><item><title>Singleton &amp; Observer Pattern (Java)</title><link>https://jianliew.me/blog/blog/november-2019/singletonobserverpattern/</link><pubDate>Sun, 03 Nov 2019 00:00:00 +1100</pubDate><guid>https://jianliew.me/blog/blog/november-2019/singletonobserverpattern/</guid><description>This blog post will demonstrate a simple use case where the singleton and observable design pattern becomes important.
Let&amp;rsquo;s imagine if you are in the arcade and there is a Lucky Dip Machine. The reason I like call it the LuckyDipMachine is because it is one of the feature assignments in the Programming Foundation Units in Monash University and it is often times made fun at. However, the solution for assignment itself can be engineered to be better.</description></item><item><title>JavaScript Sort Stability</title><link>https://jianliew.me/blog/blog/november-2019/javascriptsort/</link><pubDate>Mon, 04 Nov 2019 00:00:00 +1100</pubDate><guid>https://jianliew.me/blog/blog/november-2019/javascriptsort/</guid><description>Sorting is important. Sorting in JavaScript can be quirky. This blog post will be regarding a recent post made by the v8 team regarding the Array.prototype.sort.
This blog post will demonstrate an example where the stability of a sort becomes important. This situation is normally known as the two-pass sorting, which is a technique commonly used sort two columns. In other words, I would like to use one function to sort one column first and then another function to sort another column.</description></item><item><title>Rubber Duck</title><link>https://jianliew.me/blog/thepragmatic/rubberduck/</link><pubDate>Mon, 14 Oct 2019 00:00:00 +1100</pubDate><guid>https://jianliew.me/blog/thepragmatic/rubberduck/</guid><description>This post is under construction.
Introduction One of the most frustrating thing about teaching programming these days, is that we do not often teach the process of debugging.
Students often approach me when they are having an issue in their codes and most often times, I do not directly tell them the answer, but I will spend my time using a process known as rubber ducking while attempting to solve their issue.</description></item><item><title>The File System</title><link>https://jianliew.me/blog/teaching/ubuntu/ls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jianliew.me/blog/teaching/ubuntu/ls/</guid><description>This blog post is under construction.
This blog entry assumes that the reader has a basic understanding of using the command line and would like to know more. (More specifically using the Bash shell on Ubuntu)
The Linux File System Directory Architecture. In Linux distributions, the directory structure is defined by the Filesystem hierarchy Standard.1
.secondLevel rect { fill:lightblue !important; } graph TD R( / ) L1A( /bin ) L1AA( /etc ) L1B( /proc ) L1C[ /boot ] L1D[ /root ] L1E[ /dev ] L1F( /home ) L1G( /usr ) L2A( /jian ) L2B( /tim ) L2C( /kevin ) L2D( /bin ) R -- L1A R -- L1AA R -- L1B R -- L1C R -- L1D R -- L1E R -- L1F R -- L1G L1F -- L2A L1F -- L2B L1F -- L2C L1G -- L2D style R fill:#FFFFFF class L1A,L1AA,L1B,L1C,L1D,L1E,L1F,L1G secondLevel; This diagram shows how the file system looks like on an Ubuntu machine.</description></item><item><title>Reddit Chart</title><link>https://jianliew.me/blog/blog/october-2019/percentage/</link><pubDate>Wed, 09 Oct 2019 20:56:02 +1100</pubDate><guid>https://jianliew.me/blog/blog/october-2019/percentage/</guid><description>The charts here are visualisation of the AmIthea-hole subreddit which can be found here
The reason this post is made, is so that it would easier to see the percentage of votes of a certain type.
Please note that the posts here are generated based on the Reddit website by doing GET requests. So, it is based on their current entries.
Abbreviation Meaning YTA You&amp;rsquo;re the A-hole NTA Not the A-hole ESH Everyone sucks here NAH No A-holes here INFO Not Enough Info Posts let summary = []; let parseResult = (link) = { const endPoint = &#34;</description></item><item><title>What are State Machine Diagrams?</title><link>https://jianliew.me/blog/teaching/uml/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jianliew.me/blog/teaching/uml/introduction/</guid><description>Posted - Tue 8 Oct 07:49:09 AEDT 2019
This blog post is incomplete.
This blog entry assumes that the reader has a basic understanding of UML diagrams and would wish to understand more regarding state machine diagrams.
Introduction This article is written based on my teaching experiencing in Monash University Australia (Faculty of Information Technology) for the unit Software Engineering.
Often times, one of the most misunderstood diagram in UML is the state machine.</description></item><item><title>Reddit Word Cloud</title><link>https://jianliew.me/blog/blog/october-2019/programmming/</link><pubDate>Sat, 12 Oct 2019 20:56:02 +1100</pubDate><guid>https://jianliew.me/blog/blog/october-2019/programmming/</guid><description>The word cloud generated here is based on the /r/programming subreddit for reddit.com The reason this post is made, is so that it would easier to see the word that appeared the most for the day. Even though the use of a word cloud is not exactly a good representation of occurrence, it still looks nice. Please note that the posts here are generated based on the Reddit website by doing GET requests.</description></item><item><title>Sentiment Analysis</title><link>https://jianliew.me/blog/blog/october-2019/hk/</link><pubDate>Sun, 13 Oct 2019 20:56:02 +1100</pubDate><guid>https://jianliew.me/blog/blog/october-2019/hk/</guid><description>Sentiment Analysis for the Sub-Reddit &amp;ldquo;HongKong&amp;rdquo; This post will perform sentiment analysis using AFINN. AFINN is a list of words rated for valence rated with an integer between minus five(negative) and plus five (positive). This implementation uses AFINN-en-165. 1
This approach however is a very naive approach as it does not build any models to determine the context of the usage of the word itself.
Please note that the posts here are generated based on the Reddit website by doing GET requests.</description></item><item><title>Hacker News Word Cloud</title><link>https://jianliew.me/blog/blog/october-2019/topstories/</link><pubDate>Mon, 14 Oct 2019 20:56:02 +1100</pubDate><guid>https://jianliew.me/blog/blog/october-2019/topstories/</guid><description>The word cloud generated here is based on the website hacker news. The reason this post is made, is so that it would easier to see the word that appeared the most for the day. Even though the use of a word cloud is not exactly a good representation of occurrence, it still looks nice. Please note that the posts here are generated based on the Hacker News API by doing GET requests.</description></item><item><title>Genetic Algorithm</title><link>https://jianliew.me/blog/blog/october-2019/ga/</link><pubDate>Sat, 19 Oct 2019 00:00:00 +1100</pubDate><guid>https://jianliew.me/blog/blog/october-2019/ga/</guid><description>This post is a simple implementation of Genetic Algorithm GA. Here, you would start with a random string and end up with the target string.
This post is heavily inspired based on this website. However, I created the codes with a very different methodology to also include newer JavaScript methods like using classes and etc.
Cross Over Method One Point Two Point Uniform PMX Selection Method Tournament Random Rank Roulette Wheel Target String Run</description></item><item><title>TSP using GA</title><link>https://jianliew.me/blog/blog/october-2019/tsp/</link><pubDate>Wed, 23 Oct 2019 00:00:00 +1100</pubDate><guid>https://jianliew.me/blog/blog/october-2019/tsp/</guid><description>This post uses GA to generate a high quality solution of the Travelling Salesman Problem.
Travelling Salesman Problem using Genetic Algorithm This blog post is regarding using genetic algorithm to solve the Travelling Salesman Problem. In a one liner the TSP asks the following question: Given a list of cities and the distances between each pair of the cities, what is the shortest possible route that visits each city and returns to the origin city?</description></item><item><title>Promise All</title><link>https://jianliew.me/blog/blog/october-2019/promiseall/</link><pubDate>Fri, 25 Oct 2019 00:00:00 +1100</pubDate><guid>https://jianliew.me/blog/blog/october-2019/promiseall/</guid><description>This post is a an entry to describe a use case when the Promise.all JavaScript method is needed. The official reference can be found here. This assumes that the reader has a basic understanding of how promises work.
Before we start, there is a need to understand how certain RESTful services are structured. For example, the Hacker News API has the end point called topstories. This end point however, does not contain any other information besides a list of item IDs.</description></item><item><title>k-Nearest Neighbour on Maps</title><link>https://jianliew.me/blog/blog/october-2019/nearestneighbour/</link><pubDate>Sun, 27 Oct 2019 00:00:00 +0000</pubDate><guid>https://jianliew.me/blog/blog/october-2019/nearestneighbour/</guid><description>One of the most common query when working with maps is the nearest neighbour query. This post will explain how to accomplish an easy nearest neighbour query.
We will first start with a data set or coordinates.
The Nearest Neighbour Query on the map aims to return the nearest neighbour of a point. So, in the example, it can be seen that the 1st Nearest Neighbour of New York would be Boston and the 2nd Nearest Neighbour of New York Would be Chicago.</description></item><item><title>Java 13 on Ubuntu</title><link>https://jianliew.me/blog/blog/october-2019/java13/</link><pubDate>Sun, 13 Oct 2019 21:28:45 +1100</pubDate><guid>https://jianliew.me/blog/blog/october-2019/java13/</guid><description>Installing Java 13 on Ubuntu is pretty simple.
All that was needed was
sudo apt install openjdk-13-jdk sudo update-alternatives --config java Of course, it would be better if you are on the latest version of Ubuntu so that the apt actually finds it there. (I am currently using Ubuntu 19.04). You can obtain this information by
lsb_release -a After that, all that was needed was to properly configure the Java path where you can easily find where it is from doing</description></item><item><title>Voronoi Diagram</title><link>https://jianliew.me/blog/blog/october-2019/voronoi/</link><pubDate>Sun, 13 Oct 2019 21:27:45 +1100</pubDate><guid>https://jianliew.me/blog/blog/october-2019/voronoi/</guid><description>One of the most common query when working with maps is the nearest neighbour query. This blog post will use Voronoi Diagrams to explain more regarding the nearest neighbour query.
Below is an example of a Voronoi diagram generated using d3.js. One of the good use case of a voronoi diagram in real life applications would be where would be finding a place to build emergency services.</description></item><item><title>Curriculum Vitae</title><link>https://jianliew.me/blog/cv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jianliew.me/blog/cv/</guid><description>Summary A passionate educator and technology lover with excellent programming and communication skills. Organized and driven with the innate ability to stay on the task.
Teaching Experience Monash University, Melbourne (April 2015 - Current) Sessional Lecturer &amp;amp; Teaching Associate (Sessional)
Subjects previously taught includes:
Unit Code Name FIT1010 Introduction to Software Engineering FIT5032 Internet Applications Development FIT5042 Enterprise Web Applications FIT5120 Industry Experience Project FIT5136 Software Engineering FIT9131 Programming Foundations in Java FIT9134 Computer Architecture and Operating Systems FIT9135 Data Communications Key responsibilities Confidently assist students to become independent and collaborative learners during each studio session by encouraging participation as well as the motivation to learn from each other.</description></item><item><title>Disclaimer</title><link>https://jianliew.me/blog/disclaimer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jianliew.me/blog/disclaimer/</guid><description>This web site is not authorised by Monash University and that any opinions expressed on the pages are those of the author and not those of the University.</description></item><item><title>Time Line</title><link>https://jianliew.me/blog/timeline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jianliew.me/blog/timeline/</guid><description/></item></channel></rss>