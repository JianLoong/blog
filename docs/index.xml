<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Contents on Jian Liew</title>
    <link>https://jianliew.me/blog/</link>
    <description>Recent content in Contents on Jian Liew</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 14 Oct 2019 20:56:02 +1100</lastBuildDate>
    
	<atom:link href="https://jianliew.me/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Rubber Duck</title>
      <link>https://jianliew.me/blog/thepragmatic/rubberduck/</link>
      <pubDate>Mon, 14 Oct 2019 00:00:00 +1100</pubDate>
      
      <guid>https://jianliew.me/blog/thepragmatic/rubberduck/</guid>
      <description>This post is under construction.
 Introduction One of the most frustrating thing about teaching programming these days, is that we do not often teach the process of debugging.
Students often approach me when they are having an issue in their codes and most often times, I do not directly tell them the answer, but I will spend my time using a process known as rubber ducking while attempting to solve their issue.</description>
    </item>
    
    <item>
      <title>The File System</title>
      <link>https://jianliew.me/blog/teaching/ubuntu/ls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jianliew.me/blog/teaching/ubuntu/ls/</guid>
      <description>This blog post is under construction.
 This blog entry assumes that the reader has a basic understanding of using the command line and would like to know more. (More specifically using the Bash shell on Ubuntu)
 The Linux File System Directory Architecture. In Linux distributions, the directory structure is defined by the Filesystem hierarchy Standard.1
 .secondLevel  rect { fill:lightblue !important; }  graph TD R( / ) L1A( /bin ) L1AA( /etc ) L1B( /proc ) L1C[ /boot ] L1D[ /root ] L1E[ /dev ] L1F( /home ) L1G( /usr ) L2A( /jian ) L2B( /tim ) L2C( /kevin ) L2D( /bin ) R -- L1A R -- L1AA R -- L1B R -- L1C R -- L1D R -- L1E R -- L1F R -- L1G L1F -- L2A L1F -- L2B L1F -- L2C L1G -- L2D style R fill:#FFFFFF class L1A,L1AA,L1B,L1C,L1D,L1E,L1F,L1G secondLevel;  This diagram shows how the file system looks like on an Ubuntu machine.</description>
    </item>
    
    <item>
      <title>Reddit Chart</title>
      <link>https://jianliew.me/blog/blog/october-2019/percentage/</link>
      <pubDate>Wed, 09 Oct 2019 20:56:02 +1100</pubDate>
      
      <guid>https://jianliew.me/blog/blog/october-2019/percentage/</guid>
      <description>The charts here are visualisation of the AmIthea-hole subreddit which can be found here
The reason this post is made, is so that it would easier to see the percentage of votes of a certain type.
Please note that the posts here are generated based on the Reddit website by doing GET requests. So, it is based on their current entries.
    Abbreviation Meaning     YTA You&amp;rsquo;re the A-hole   NTA Not the A-hole   ESH Everyone sucks here   NAH No A-holes here   INFO Not Enough Info    Posts   let summary = []; let parseResult = (link) = { const endPoint = &#34;</description>
    </item>
    
    <item>
      <title>What are State Machine Diagrams?</title>
      <link>https://jianliew.me/blog/teaching/uml/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jianliew.me/blog/teaching/uml/introduction/</guid>
      <description>Posted - Tue 8 Oct 07:49:09 AEDT 2019
This blog post is incomplete.
 This blog entry assumes that the reader has a basic understanding of UML diagrams and would wish to understand more regarding state machine diagrams.
 Introduction This article is written based on my teaching experiencing in Monash University Australia (Faculty of Information Technology) for the unit Software Engineering.
Often times, one of the most misunderstood diagram in UML is the state machine.</description>
    </item>
    
    <item>
      <title>Reddit Word Cloud </title>
      <link>https://jianliew.me/blog/blog/october-2019/programmming/</link>
      <pubDate>Sat, 12 Oct 2019 20:56:02 +1100</pubDate>
      
      <guid>https://jianliew.me/blog/blog/october-2019/programmming/</guid>
      <description>The word cloud generated here is based on the /r/programming subreddit for reddit.com
The reason this post is made, is so that it would easier to see the word that appeared the most for the day.
Even though the use of a word cloud is not exactly a good representation of occurrence, it still looks nice.
 Please note that the posts here are generated based on the Reddit website by doing GET requests.</description>
    </item>
    
    <item>
      <title>Sentiment Analysis</title>
      <link>https://jianliew.me/blog/blog/october-2019/hk/</link>
      <pubDate>Sun, 13 Oct 2019 20:56:02 +1100</pubDate>
      
      <guid>https://jianliew.me/blog/blog/october-2019/hk/</guid>
      <description>Sentiment Analysis for the Sub-Reddit &amp;ldquo;HongKong&amp;rdquo; This post will perform sentiment analysis using AFINN. AFINN is a list of words rated for valence rated with an integer between minus five(negative) and plus five (positive). This implementation uses AFINN-en-165. 1
This approach however is a very naive approach as it does not build any models to determine the context of the usage of the word itself.
Please note that the posts here are generated based on the Reddit website by doing GET requests.</description>
    </item>
    
    <item>
      <title>Hacker News Word Cloud </title>
      <link>https://jianliew.me/blog/blog/october-2019/topstories/</link>
      <pubDate>Mon, 14 Oct 2019 20:56:02 +1100</pubDate>
      
      <guid>https://jianliew.me/blog/blog/october-2019/topstories/</guid>
      <description>The word cloud generated here is based on the website hacker news.
The reason this post is made, is so that it would easier to see the word that appeared the most for the day.
Even though the use of a word cloud is not exactly a good representation of occurrence, it still looks nice.
Please note that the posts here are generated based on the Hacker News API by doing GET requests.</description>
    </item>
    
    <item>
      <title>Curriculum Vitae</title>
      <link>https://jianliew.me/blog/cv/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jianliew.me/blog/cv/</guid>
      <description>Summary A passionate educator and technology lover with excellent programming and communication skills. Organized and driven with the innate ability to stay on the task.
Teaching Experience Monash University, Melbourne (April 2015 - Current) Sessional Lecturer &amp;amp; Teaching Associate (Sessional)
Subjects previously taught includes:
   Unit Code Name     FIT1010 Introduction to Software Engineering   FIT5032 Internet Applications Development   FIT5042 Enterprise Web Applications   FIT5120 Industry Experience Project   FIT5136 Software Engineering   FIT9131 Programming Foundations in Java   FIT9134 Computer Architecture and Operating Systems   FIT9135 Data Communications    Key responsibilities  Confidently assist students to become independent and collaborative learners during each studio session by encouraging participation as well as the motivation to learn from each other.</description>
    </item>
    
    <item>
      <title>Disclaimer</title>
      <link>https://jianliew.me/blog/disclaimer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jianliew.me/blog/disclaimer/</guid>
      <description>This web site is not authorised by Monash University and that any opinions expressed on the pages are those of the author and not those of the University.</description>
    </item>
    
    <item>
      <title>Time Line</title>
      <link>https://jianliew.me/blog/timeline/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jianliew.me/blog/timeline/</guid>
      <description> </description>
    </item>
    
  </channel>
</rss>