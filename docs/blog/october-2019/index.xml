<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>October 2019 on Jian Liew</title><link>https://jianliew.me/blog/blog/october-2019/</link><description>Recent content in October 2019 on Jian Liew</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 27 Oct 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://jianliew.me/blog/blog/october-2019/index.xml" rel="self" type="application/rss+xml"/><item><title>Reddit Chart</title><link>https://jianliew.me/blog/blog/october-2019/percentage/</link><pubDate>Wed, 09 Oct 2019 20:56:02 +1100</pubDate><guid>https://jianliew.me/blog/blog/october-2019/percentage/</guid><description>The charts here are visualisation of the AmIthea-hole subreddit which can be found here
The reason this post is made, is so that it would easier to see the percentage of votes of a certain type.
Please note that the posts here are generated based on the Reddit website by doing GET requests. So, it is based on their current entries.
Abbreviation Meaning YTA You&amp;rsquo;re the A-hole NTA Not the A-hole ESH Everyone sucks here NAH No A-holes here INFO Not Enough Info Posts let summary = []; let parseResult = (link) = { const endPoint = &#34;</description></item><item><title>Reddit Word Cloud</title><link>https://jianliew.me/blog/blog/october-2019/programmming/</link><pubDate>Sat, 12 Oct 2019 20:56:02 +1100</pubDate><guid>https://jianliew.me/blog/blog/october-2019/programmming/</guid><description>The word cloud generated here is based on the /r/programming subreddit for reddit.com The reason this post is made, is so that it would easier to see the word that appeared the most for the day. Even though the use of a word cloud is not exactly a good representation of occurrence, it still looks nice. Please note that the posts here are generated based on the Reddit website by doing GET requests.</description></item><item><title>Sentiment Analysis</title><link>https://jianliew.me/blog/blog/october-2019/hk/</link><pubDate>Sun, 13 Oct 2019 20:56:02 +1100</pubDate><guid>https://jianliew.me/blog/blog/october-2019/hk/</guid><description>Sentiment Analysis for the Sub-Reddit &amp;ldquo;HongKong&amp;rdquo; This post will perform sentiment analysis using AFINN. AFINN is a list of words rated for valence rated with an integer between minus five(negative) and plus five (positive). This implementation uses AFINN-en-165. 1
This approach however is a very naive approach as it does not build any models to determine the context of the usage of the word itself.
Please note that the posts here are generated based on the Reddit website by doing GET requests.</description></item><item><title>Hacker News Word Cloud</title><link>https://jianliew.me/blog/blog/october-2019/topstories/</link><pubDate>Mon, 14 Oct 2019 20:56:02 +1100</pubDate><guid>https://jianliew.me/blog/blog/october-2019/topstories/</guid><description>The word cloud generated here is based on the website hacker news. The reason this post is made, is so that it would easier to see the word that appeared the most for the day. Even though the use of a word cloud is not exactly a good representation of occurrence, it still looks nice. Please note that the posts here are generated based on the Hacker News API by doing GET requests.</description></item><item><title>Genetic Algorithm</title><link>https://jianliew.me/blog/blog/october-2019/ga/</link><pubDate>Sat, 19 Oct 2019 00:00:00 +1100</pubDate><guid>https://jianliew.me/blog/blog/october-2019/ga/</guid><description>This post is a simple implementation of Genetic Algorithm GA. Here, you would start with a random string and end up with the target string.
This post is heavily inspired based on this website. However, I created the codes with a very different methodology to also include newer JavaScript methods like using classes and etc.
Cross Over Method One Point Two Point Uniform PMX Selection Method Tournament Random Rank Roulette Wheel Target String Run</description></item><item><title>TSP using GA</title><link>https://jianliew.me/blog/blog/october-2019/tsp/</link><pubDate>Wed, 23 Oct 2019 00:00:00 +1100</pubDate><guid>https://jianliew.me/blog/blog/october-2019/tsp/</guid><description>This post uses GA to generate a high quality solution of the Travelling Salesman Problem.
Travelling Salesman Problem using Genetic Algorithm This blog post is regarding using genetic algorithm to solve the Travelling Salesman Problem. In a one liner the TSP asks the following question: Given a list of cities and the distances between each pair of the cities, what is the shortest possible route that visits each city and returns to the origin city?</description></item><item><title>Promise All</title><link>https://jianliew.me/blog/blog/october-2019/promiseall/</link><pubDate>Fri, 25 Oct 2019 00:00:00 +1100</pubDate><guid>https://jianliew.me/blog/blog/october-2019/promiseall/</guid><description>This post is a an entry to describe a use case when the Promise.all JavaScript method is needed. The official reference can be found here. This assumes that the reader has a basic understanding of how promises work.
Before we start, there is a need to understand how certain RESTful services are structured. For example, the Hacker News API has the end point called topstories. This end point however, does not contain any other information besides a list of item IDs.</description></item><item><title>k-Nearest Neighbour on Maps</title><link>https://jianliew.me/blog/blog/october-2019/nearestneighbour/</link><pubDate>Sun, 27 Oct 2019 00:00:00 +0000</pubDate><guid>https://jianliew.me/blog/blog/october-2019/nearestneighbour/</guid><description>One of the most common query when working with maps is the nearest neighbour query. This post will explain how to accomplish an easy nearest neighbour query.
We will first start with a data set or coordinates.
The Nearest Neighbour Query on the map aims to return the nearest neighbour of a point. So, in the example, it can be seen that the 1st Nearest Neighbour of New York would be Boston and the 2nd Nearest Neighbour of New York Would be Chicago.</description></item><item><title>Java 13 on Ubuntu</title><link>https://jianliew.me/blog/blog/october-2019/java13/</link><pubDate>Sun, 13 Oct 2019 21:28:45 +1100</pubDate><guid>https://jianliew.me/blog/blog/october-2019/java13/</guid><description>Installing Java 13 on Ubuntu is pretty simple.
All that was needed was
sudo apt install openjdk-13-jdk sudo update-alternatives --config java Of course, it would be better if you are on the latest version of Ubuntu so that the apt actually finds it there. (I am currently using Ubuntu 19.04). You can obtain this information by
lsb_release -a After that, all that was needed was to properly configure the Java path where you can easily find where it is from doing</description></item><item><title>Voronoi Diagram</title><link>https://jianliew.me/blog/blog/october-2019/voronoi/</link><pubDate>Sun, 13 Oct 2019 21:27:45 +1100</pubDate><guid>https://jianliew.me/blog/blog/october-2019/voronoi/</guid><description>One of the most common query when working with maps is the nearest neighbour query. This blog post will use Voronoi Diagrams to explain more regarding the nearest neighbour query.
Below is an example of a Voronoi diagram generated using d3.js. One of the good use case of a voronoi diagram in real life applications would be where would be finding a place to build emergency services.</description></item></channel></rss>