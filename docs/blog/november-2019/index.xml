<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>November 2019 on Jian Liew</title><link>https://jianliew.me/blog/blog/november-2019/</link><description>Recent content in November 2019 on Jian Liew</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 04 Nov 2019 00:00:00 +1100</lastBuildDate><atom:link href="https://jianliew.me/blog/blog/november-2019/index.xml" rel="self" type="application/rss+xml"/><item><title>Nested Data in Documents (FireStore)</title><link>https://jianliew.me/blog/blog/november-2019/firestore/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jianliew.me/blog/blog/november-2019/firestore/</guid><description>When using Google Firestore, there is a need to put some thought into the way the data is structure. Each option would have an advantage or limitations depending on the use case.
With JSON being everywhere, there are times when there is a need to figure out how to structure data in the Cloud Firestore.
Here are a few common options.
Nested data in documents Subcollections Root-level The most important thing to remember that there is no perfect solution for structuring a Cloud Firestore database.</description></item><item><title>Singleton &amp; Observer Pattern (Java)</title><link>https://jianliew.me/blog/blog/november-2019/singletonobserverpattern/</link><pubDate>Sun, 03 Nov 2019 00:00:00 +1100</pubDate><guid>https://jianliew.me/blog/blog/november-2019/singletonobserverpattern/</guid><description>This blog post will demonstrate a simple use case where the singleton and observable design pattern becomes important.
Let&amp;rsquo;s imagine if you are in the arcade and there is a Lucky Dip Machine. The reason I like call it the LuckyDipMachine is because it is one of the feature assignments in the Programming Foundation Units in Monash University and it is often times made fun at. However, the solution for assignment itself can be engineered to be better.</description></item><item><title>JavaScript Sort Stability</title><link>https://jianliew.me/blog/blog/november-2019/javascriptsort/</link><pubDate>Mon, 04 Nov 2019 00:00:00 +1100</pubDate><guid>https://jianliew.me/blog/blog/november-2019/javascriptsort/</guid><description>Sorting is important. Sorting in JavaScript can be quirky. This blog post will be regarding a recent post made by the v8 team regarding the Array.prototype.sort.
This blog post will demonstrate an example where the stability of a sort becomes important. The situation is normally known as the two-pass sorting which is commonly used sort by two columns. In other words, I would like to use one function to sort one column first and then another function to sort another column.</description></item></channel></rss>