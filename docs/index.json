[{"uri":"https://jianliew.me/blog/blog/october-2019/guard/","title":"Explicit Else (Guard)","tags":["Swift","Coding Style"],"description":"","content":" Before we start, lets take a look at the grammar of a guard statement for the Swift language.\n Grammar of a Guard Statement\nguard-statement \u0026ndash;\u0026gt; guard condition-list else code-block\n This was a conversation I had with a co-worker a couple of days back. I asked him, what is this guard in Swift? I have not been programming in Swift since iOS development made a shift from Objective C to Swift and I have not seen a guard statement used in any other languages I programmed in. It seems that guards are everywhere in Swift, but my coworker said that guards are something he never used. This is a very interesting notion. At the end of the day, each programmer has his or her own style. It is not wrong to not use guards at all but if so, why are guards everywhere?\n(In fact, guards were only added in Swift 2.0)\nLet\u0026rsquo;s try to understand why guards are everywhere in Swift. Semantically, guards are just a methodology to practice defensive programming and the notion where you need to return early.\nThe main reason guards are so dominant in Swift is due to the fact there are Optionals.\nReferences  StackExchange post regarding guards here. Nested conditionals and guards. Post found here  "},{"uri":"https://jianliew.me/blog/blog/november-2019/firestore/","title":"Nested Data in Documents (FireStore)","tags":["Swift","DateTime","Design","Document Database"],"description":"","content":" When using Google Firestore, there is a need to put some thought into the way the data is structure. Each option would have an advantage or limitations depending on the use case.\n With JSON being everywhere, there are times when there is a need to figure out how to structure data in the Cloud Firestore.\nHere are a few common options.\n Nested data in documents Subcollections Root-level  The most important thing to remember that there is no perfect solution for structuring a Cloud Firestore database. The best and correct solution often times would be the solution that fis the needs and makes the job easier.\n    Type Advantages Limitations     Nested Easy to set up Nested documents isn\u0026rsquo;t as scalable as other   Sub-collections Full query capability on sub-collections. Cannot easily delete sub-collections   Root-level collections Most flexible and most scalable long with powerful query capability. Getting data becomes more complex as data grows    Avoid using Time as Document ID One of the common things I have seen is that some developers often use a date or datetime as their document id as their collection name. There are actually several reasons this should not be done. (This is especially true for FireStore)\n Document IDs should not be monotonically increasing such as  Customer1, Customer2, Customer3, \u0026hellip;. Product1, Product2, Product3, \u0026hellip;. 2019-01-01, 2019-01,02, 2019-01-03,\u0026hellip;  Sequential IDs can lead to hotspots. Document IDs are Strings and parsing Strings are often times very troublesome.  For example, how would you query all documents on February? It would be super hard if they were stored as a String data type and you would be doing a lot of String transformations which is processor intensive and not needed at all. Document IDs in FireStore should not be stored as a date.  FireStore Queries. One of the benefits of FireStore is that allows you to write better queries in comparison to Firebase, thus if there is a field with the datatype of timestamp, it would allow you to do range queries on that field itself. This can only be done if the data type is timestamp. Time-zone. Depending on your use case, time zones play a very important factor. For example, if you are collecting data from a sensor, which time becomes important? Would it be Firebase Server time or would it be the time where the sensor itself is? What happens when Day Light Saving happens? Thus, it would always be a better idea to keep the time stamp with a time zone correctly.  References  Firebase. (2019). Choose a data structure | Firebase. [online] Available at: https://firebase.google.com/docs/firestore/manage-data/structure-data [Accessed 1 Nov. 2019]. Firebase. (2019). Perform simple and compound queries in Cloud Firestore | Firebase. [online] Available at: https://firebase.google.com/docs/firestore/query-data/queries [Accessed 1 Nov. 2019].  "},{"uri":"https://jianliew.me/blog/blog/november-2019/singletonobserverpattern/","title":"Singleton &amp; Observer Pattern (Java)","tags":["Java","Design Pattern","Singleton","Observer"],"description":"","content":" This blog post will demonstrate a simple use case where the singleton and observable design pattern becomes important.\n Let\u0026rsquo;s imagine if you are in the arcade and there is a Lucky Dip Machine. The reason I like call it the LuckyDipMachine is because it is one of the feature assignments in the Programming Foundation Units in Monash University and it is often times made fun at. However, the solution for assignment itself can be engineered to be better.\n There is only one Lucky Dip Machine in the arcade. This lucky dip machine has a limited number of items in its inventory. A singleton design pattern will be used to instantiate this class. The reason for a Singleton pattern is so that, there can only ever be one LuckyDipMachine. Multiple uses of the LuckyDipMachine will only deduct items from this instance.\n Everyone in the arcade can observe when the LuckyDipMachine is used. Whenever, a price is won, the observers would know what Prize has been won.\n  graph TD A(LuckyDipMachine\nSingleton) B(ObserverOne) C(ObserverTWo) D(User) B -- observes-- A C -- observes-- A D -- uses -- A A --fire changes -- B A --fire changes -- C  Fig 1. Flowchart Representation of the intended design We start off by creating a really simple Prize class.\npackage me.jianliew; public class Prize { private String name; public Prize(String name) { this.name = name; } public String getName() { return name; } public void setName(String name) { this.name = name; } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Prize prize = (Prize) o; return getName().equals(prize.getName()); } @Override public int hashCode() { return getName().hashCode(); } @Override public String toString() { return \u0026quot;Prize{\u0026quot; + \u0026quot;name=\u0026#39;\u0026quot; + name + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#39;}\u0026#39;; } }  Our Prize class is just a plain old Java object.\nHowever, our LuckyDipMachine class is slightly more interesting. Here are the characteristics of it\n It has a private constructor. It has a static instance of itself. This is done as a class variable. A PropertyChangeSupport as a field to create an observable pattern. A pull method of the LuckyDipMachine indicating whenever the lucky dip machine has been pulled or used. When this happens, it will fire a property change done via calling the firePropertyChange method.   package me.jianliew; import java.beans.PropertyChangeListener; import java.beans.PropertyChangeSupport; import java.util.*; public class LuckyDipMachine { private Map\u0026lt;Prize, Integer\u0026gt; inventory; private static LuckyDipMachine ourInstance = new LuckyDipMachine(); private PropertyChangeSupport support; public static LuckyDipMachine getInstance() { return ourInstance; } private LuckyDipMachine() { inventory = new HashMap\u0026lt;\u0026gt;(); support = new PropertyChangeSupport(this); fill(); } private void fill(){ Prize p1 = new Prize(\u0026quot;Potato\u0026quot;); Prize p2 = new Prize(\u0026quot;Tomato\u0026quot;); inventory.put(p1,2); inventory.put(p2,2); } public Prize getRandomPrize(){ List\u0026lt;Prize\u0026gt; keysAsArray = new ArrayList\u0026lt;\u0026gt;(inventory.keySet()); Random r = new Random(); return keysAsArray.get(r.nextInt(keysAsArray.size())); } public void pull(){ if (inventory.isEmpty()) return; Prize p = getRandomPrize(); inventory.computeIfPresent(p, (prize, integer) -\u0026gt; inventory.get(prize) - 1); if(inventory.get(p) == 0){ inventory.remove(p); } support.firePropertyChange(\u0026quot;prize\u0026quot;, \u0026quot;\u0026quot;, p); } public int getInventorySize() { int sum = 0; for (Prize p : inventory.keySet()) sum += inventory.get(p); return sum; } public void addPropertyChangeListener(PropertyChangeListener pcl) { support.addPropertyChangeListener(pcl); } public void removePropertyChangeListener(PropertyChangeListener pcl) { support.removePropertyChangeListener(pcl); } @Override public String toString() { return \u0026quot;LuckyDipMachine{\u0026quot; + \u0026quot;inventory=\u0026quot; + inventory + \u0026#39;}\u0026#39;; } }   We also have the Observer. The only thing that is needed in this class is for it to implement the PropertyChangeListener. I will also need to have an implementation for the propertyChange.\npackage me.jianliew; import java.beans.PropertyChangeEvent; import java.beans.PropertyChangeListener; import java.util.ArrayList; import java.util.List; public class Observer implements PropertyChangeListener { private List\u0026lt;Prize\u0026gt; observedPrizes; public Observer(){ observedPrizes = new ArrayList\u0026lt;\u0026gt;(); } @Override public void propertyChange(PropertyChangeEvent propertyChangeEvent) { Prize p = (Prize) propertyChangeEvent.getNewValue(); this.observedPrizes.add(p); System.out.println(toString()); } @Override public String toString() { return \u0026quot;Observer{\u0026quot; + \u0026quot;observedPrizes=\u0026quot; + observedPrizes + \u0026#39;}\u0026#39;; } }   We can then have a simple Test class to see how it works.\npackage me.jianliew; public class Test { public static void main(String[] args) { Observer o = new Observer(); LuckyDipMachine ldm = LuckyDipMachine.getInstance(); ldm.addPropertyChangeListener(o); System.out.println(ldm.getInventorySize()); ldm.pull(); ldm.pull(); ldm.pull(); LuckyDipMachine ldm2= LuckyDipMachine.getInstance(); System.out.println(ldm2.getInventorySize()); ldm2.pull(); System.out.println(ldm.getInventorySize()); } }  The output of it would be as follows.\n// There will be 4 items at the start 4 // On the first pull a random item is returned. The observer observes it. Observer{observedPrizes=[Prize{name=\u0026#39;Tomato\u0026#39;}]} // On the second pull, the observer now sees 2 items in total. Observer{observedPrizes=[Prize{name=\u0026#39;Tomato\u0026#39;}, Prize{name=\u0026#39;Potato\u0026#39;}]} // There will be three items on the third pull. Observer{observedPrizes=[Prize{name=\u0026#39;Tomato\u0026#39;}, Prize{name=\u0026#39;Potato\u0026#39;}, Prize{name=\u0026#39;Tomato\u0026#39;}]} // The second instance of the LuckyDipMachine will still only have 1 item as the LuckyDipMachine is a singleton. 1 // The pull of the second lucky dip machine, still triggers a fire to the observer as it is a singleton. There is no need to register the listener again. Observer{observedPrizes=[Prize{name=\u0026#39;Tomato\u0026#39;}, Prize{name=\u0026#39;Potato\u0026#39;}, Prize{name=\u0026#39;Tomato\u0026#39;}, Prize{name=\u0026#39;Potato\u0026#39;}]} // At the end there will be nothing left in the machine. 0  Lessons from this blog post.  It is very important to override both the equals and the hashCode when using maps. The Singleton design pattern have many different approaches. The approach which I have used here is the most simplistic approach and does have certain design concerns. Design is still very subjective matter as it is debatable to put the quantity field in the Prize class itself. The runtime to get a random item from a HashMap would depend on the implementation of it. Pygments and Chroma of the Hugo static website generator are both good but Chroma seems to look nice out of the box for my use case. PropertyChangeSupport is so much easier to use compare to the Observable interface class. computeIfPresent method is pretty cool as it uses a lambda like feature.  References  quantities, I. and L., E. (2019). Inventory of objects with item types and quantities. [online] Code Review Stack Exchange. Available at: https://codereview.stackexchange.com/questions/148821/inventory-of-objects-with-item-types-and-quantities [Accessed 3 Nov. 2019]. Baeldung. (2019). Singletons in Java | Baeldung. [online] Available at: https://www.baeldung.com/java-singleton [Accessed 3 Nov. 2019]. Baeldung. (2019). The Observer Pattern in Java | Baeldung. [online] Available at: https://www.baeldung.com/java-observer-pattern [Accessed 3 Nov. 2019].  "},{"uri":"https://jianliew.me/blog/blog/november-2019/javascriptsort/","title":"JavaScript Sort Stability","tags":["Sort","JavaScript","ES6"],"description":"","content":" Sorting is important. Sorting in JavaScript can be quirky. This blog post will be regarding a recent post made by the v8 team regarding the Array.prototype.sort.\n This blog post will demonstrate an example where the stability of a sort becomes important. This situation is normally known as the two-pass sorting, which is a technique commonly used sort two columns. In other words, I would like to use one function to sort one column first and then another function to sort another column. This is different in comparison to having a single function that sorts two columns in a single pass. Hence, with a two-pass, two different functions will be used for sorting instead of a call to a single function. (This would apply for two or more passes as well, otherwise known as a chain.)\nJavaScript implementation of sort is not stable.\n Let\u0026rsquo;s have a look at a JavaScript example below.\nconst sortExample = () =\u0026gt; { const students = [ { name: \u0026quot;Charlie Doe\u0026quot;, score: 50 }, { name: \u0026quot;Alex Smith\u0026quot;, score: 60 }, { name: \u0026quot;Alex Doe\u0026quot;, score: 60 }, { name: \u0026quot;Drew Doe\u0026quot;, score: 50 }, { name: \u0026quot;Taylor Doe\u0026quot;, score: 50 }, { name: \u0026quot;Jordan Doe\u0026quot;, score: 55 }, { name: \u0026quot;Blake Doe\u0026quot;, score: 50 } ]; const sortByScore = students =\u0026gt; students.sort((a, b) =\u0026gt; b.score - a.score); const sortByName = students =\u0026gt; students.sort((a, b) =\u0026gt; (\u0026quot;\u0026quot; + a.name).localeCompare(b.name)); sortByName(students); console.log(JSON.parse(JSON.stringify(students))); sortByScore(students); console.log(JSON.parse(JSON.stringify(students))); }; sortExample();  In this example, I have two functions one of them sortByScore and another sortByName. Each of them would work individually and let\u0026rsquo;s assume that test cases have been written for them. So what I would do is, I would use sortByName first. After, it is completed, I would then use sortByScore. I would expect my results to be sorted by the score but ordered based on the alphabetical order as I have already sorted by their names.\nHowever, this will only be the case if, the sort is stable. If the sort is not stable, the final results might not be in alphabetical order for the same scores.\nThe output for the sortByName.\n0: {name: \u0026quot;Alex Doe\u0026quot;, score: 60} 1: {name: \u0026quot;Alex Smith\u0026quot;, score: 60} 2: {name: \u0026quot;Blake Doe\u0026quot;, score: 50} 3: {name: \u0026quot;Charlie Doe\u0026quot;, score: 50} 4: {name: \u0026quot;Drew Doe\u0026quot;, score: 50} 5: {name: \u0026quot;Jordan Doe\u0026quot;, score: 55} 6: {name: \u0026quot;Taylor Doe\u0026quot;, score: 50} length: 7 __proto__: Array(0)  Notice that in this output, the array is sorted by their names.\nWe will now sort the entries by the score by using the same function on the array using the sortByScore function.\n0: {name: \u0026quot;Alex Doe\u0026quot;, score: 60} 1: {name: \u0026quot;Alex Smith\u0026quot;, score: 60} 2: {name: \u0026quot;Jordan Doe\u0026quot;, score: 55} 3: {name: \u0026quot;Blake Doe\u0026quot;, score: 50} 😄 4: {name: \u0026quot;Charlie Doe\u0026quot;, score: 50}😄 5: {name: \u0026quot;Drew Doe\u0026quot;, score: 50} 😄 6: {name: \u0026quot;Taylor Doe\u0026quot;, score: 50} 😄 length: 7 __proto__: Array(0)  A stable sort will return the entries in the order they would appear in the original array. If the sorting algorithm used is not stable, an outcome that could happen from the sortByScore can be something like the following.\n0: {name: \u0026quot;Alex Doe\u0026quot;, score: 60} 1: {name: \u0026quot;Alex Smith\u0026quot;, score: 60} 2: {name: \u0026quot;Jordan Doe\u0026quot;, score: 55} 3: {name: \u0026quot;Charlie Doe\u0026quot;, score: 50} 😓 4: {name: \u0026quot;Blake Doe\u0026quot;, score: 50} 😓 5: {name: \u0026quot;Drew Doe\u0026quot;, score: 50} 😄 6: {name: \u0026quot;Taylor Doe\u0026quot;, score: 50} 😄 length: 7 __proto__: Array(0)  Here the entries Charlie Doe and Blake Doe has been swapped. This is not the intended result from the sorting algorithm as the sort itself is not stable.\nOf course, I could rewrite the sort to be a single pass by using. However, this single pass sort function is still not stable because of the implementation of the sorting algorithm in which JavaScript uses. However, it does fit for my specific use case.\nconst sortByScoreThenName = students =\u0026gt; students.sort((a, b) =\u0026gt; { if (b.score \u0026gt; a.score) return 1; if (b.score \u0026lt; a.score) return -1; if (b.score == a.score) return (\u0026quot;\u0026quot; + a.name).localeCompare(b.name); });  But the main objective of this blog post is to describe a situation where the stability of the sort becomes important. In short, the stability of a sort matters when there is a need for the list or array to be chained through multiple conditions.\nThe take away message from this blog post is - JavaScript sort is not stable. - The stability of a sort matters when there is a need to chain sorts.\n  const sortExample = () = { const students = [ {name: \"Charlie Doe\", score: 50}, {name: \"Alex Smith\", score: 60}, {name: \"Alex Doe\", score: 60}, {name: \"Drew Doe\", score: 50}, {name: \"Taylor Doe\", score: 50}, {name: \"Jordan Doe\", score: 55}, {name: \"Blake Doe\", score: 50} ]; const sortByScore = (students) = students.sort((a,b) = b.score - a.score); const sortByName = (students) = students.sort((a,b) = ('' + a.name).localeCompare(b.name)); sortByName(students); console.log(JSON.parse(JSON.stringify(students))); sortByScore(students); console.log(JSON.parse(JSON.stringify(students))); // const sortByScoreThenName = (students) = students.sort((a,b) = { // if(b.score  a.score) return 1; // if(b.score Lessons from this blog post.  JavaScript String sort can be easily done using localeCompare. Console.log uses reference. (Once again, so it is much better to Stringify it) Safari no longer support Windows. (I wonder how long ago it ended support for Windows) V8 is an amazing engine.  References  V8.dev. (2019). Stable Array.prototype.sort · V8. [online] Available at: https://v8.dev/features/stable-sort [Accessed 3 Nov. 2019]. stable?, W., Brunell, M., Robinson, A., Koberg, J. and Carter, J. (2019). What is the benefit for a sort algorithm to be stable?. [online] Stack Overflow. Available at: https://stackoverflow.com/questions/808617/what-is-the-benefit-for-a-sort-algorithm-to-be-stable [Accessed 3 Nov. 2019].  "},{"uri":"https://jianliew.me/blog/blog/november-2019/","title":"November 2019","tags":[],"description":"","content":" Summary of November Learning Experience Empty :(\n"},{"uri":"https://jianliew.me/blog/blog/october-2019/","title":"October 2019","tags":[],"description":"","content":" Summary of October Learning Experience  The learning curve of d3.js is higher than expected. Most people would just commonly find an example online and tailor it to suit their needs.\n d3 heavily relies on rendering svg elements and understanding \u0026ldquo;d\u0026rdquo;, \u0026ldquo;g\u0026rdquo;,\u0026rdquo; paths\u0026rdquo; and a lot of other things.\n Most newer d3 APIs would provide a \u0026ldquo;render\u0026rdquo; function that simplies the rendering of shapes.\n JSONP using Ajax is old and should not be used, Fetch should be used instead.\n Generating word clouds does not mean the word cloud is meaningful.\n Getting the number of time a word appears does not have an impact to the semantic meaning of the events that occur daily.\n Raspiberry PI is easier to used in comparison to \u0026ldquo;last time\u0026rdquo;.\n OpenCV libraries are much cleaner now instead of the days where are \u0026ldquo;many\u0026rdquo; compile warnings.\n You could not push a \u0026ldquo;BLOB\u0026rdquo; into FireStore but it is easily solved with a String.\n A lot of people do not understand the importance of a date data type.\n  "},{"uri":"https://jianliew.me/blog/thepragmatic/rubberduck/","title":"Rubber Duck","tags":["Debugging","Rubber Duck"],"description":"","content":" This post is under construction.\n Introduction One of the most frustrating thing about teaching programming these days, is that we do not often teach the process of debugging.\nStudents often approach me when they are having an issue in their codes and most often times, I do not directly tell them the answer, but I will spend my time using a process known as rubber ducking while attempting to solve their issue.\n One of my co-workers asked why do I not just tell them the answer? \n My reply to him was, if I was just telling them the answer right away, it is actually pointless because I would be solving the problem for them. I do not want to solve the problem for them. In actual fact, I want to teach them a useful skill where they could arrive to the solution by understanding the problem, thus they would be able to solve the problem with my help but not with me outright giving the answer.\nThere\u0026rsquo;s an old saying\u0026hellip;.\nGive a man a fish, and you'll feed him for a day. Teach a man to fish, and you've fed him for a ife time. - Confucius  Of course, I would save a lot of time by just giving out the solution, but will that be useful for the student in the long term?\nMost students generally have more time at hand than the teaching staff, however most of the times, teaching associates (TA)s find it frustrating when handling and teaching students how to solve a problem due to their own schedules as well. It is my belief that, it is very important to teach students the correct process of debugging and problem solving in this scenario.\nI totally disagree with my co-worker that I should outright give them the solution for their programming issue. However, I think it would also depends on the personality and the method of teaching each individual would have. I think the depth of understanding plays a very important role when attempting to do rubber duck debugging. That very individual does not have much of a programming background but more towards a business background thus the mind set is completely different. I am not trying to victimise that person, however it is merely different point of views.\nWhat is Rubber Duck Debugging? Rubber ducking is a very useful technique for finding the cause of a problem by explaining it someone else. This is one of the techniques I often use when another programmer comes to me and asks for help.\n .firstLevel  rect { fill: pink !important; } .secondLevel  rect { fill:lightblue !important; }  The name origins of the name of the rubber duck is where a programmer would carry around a rubber duck and debug their code by forcing themselves to explain it, line-by-line to the duck.\nInsights are often found by simply describing the problem aloud. - Duck, Quack Overflow  \ngraph TD A(Issue/Problem) B[Why?] C[Who?] D[When?] E[What?] F[Solution] A -- B A -- C A -- D A -- E B -- F C -- F D -- F E -- F class A firstLevel; class B,C,D,E secondLevel;  Rubber Duck Advantage One of the more interesting about rubber duck technique, is that it will allow you to tell another programmer why something should not be done.\n .shadow { box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1); padding-right: 1em; padding-left: 1em; padding-top: 1em; padding-bottom: 0.5em; } .pull-right { text-align:right; }  "},{"uri":"https://jianliew.me/blog/blog/","title":"Blog","tags":[],"description":"","content":" This blog is mainly about programming. It will also attempt document various thought process to achieve the desired outcome.\n"},{"uri":"https://jianliew.me/blog/teaching/ubuntu/ls/","title":"The File System","tags":["Shell","Bash","Command Line"],"description":"","content":" This blog post is under construction.\n This blog entry assumes that the reader has a basic understanding of using the command line and would like to know more. (More specifically using the Bash shell on Ubuntu)\n The Linux File System Directory Architecture. In Linux distributions, the directory structure is defined by the Filesystem hierarchy Standard.1\n .secondLevel  rect { fill:lightblue !important; }  graph TD R( / ) L1A( /bin ) L1AA( /etc ) L1B( /proc ) L1C[ /boot ] L1D[ /root ] L1E[ /dev ] L1F( /home ) L1G( /usr ) L2A( /jian ) L2B( /tim ) L2C( /kevin ) L2D( /bin ) R -- L1A R -- L1AA R -- L1B R -- L1C R -- L1D R -- L1E R -- L1F R -- L1G L1F -- L2A L1F -- L2B L1F -- L2C L1G -- L2D style R fill:#FFFFFF class L1A,L1AA,L1B,L1C,L1D,L1E,L1F,L1G secondLevel;  This diagram shows how the file system looks like on an Ubuntu machine. The first and top most directory is called the root directory. This directory is denoted as the / (forward slash) symbol. The reason for this is because it can be thought off as the trunk of a tree. The directory entry itself has no name. The name of it is the empty part before the initial directory separator.\n   Directory Purpose     / - First directory and the root of the entire file system hierarchy - Contains all other directories   /bin - Contains commands that may be used by both the system administrators and by users - There must be no subdirectories in here.   /boot - The operating system kernel is located here.   /etc - Contains configuration files. Configuration file is a local file that is used to control the operation of a program. It must be static and cannot be an executable binary.   /home - This directory contains user\u0026rsquo;s home directories. Generally, each user would have a separate directory with their username under this directory.    Even though /home is a standard concept, the setup will differ from host to host. Therefore it is important that no program should assume any specific location for a home directory, rather it should query for it.\n On Ubuntu, you will notice another directory called /root, however, this is not the root directory. It is actually the home directory of the superuser.\n Your home directory. What is a pathname? There are two types of path names.\ngraph TD linkStyle default interpolate linear R(Pathname) P1(Absolute Path) P2(Relative Path) R -- P1 R -- P2 style P1 fill:skyblue; style P2 fill:skyblue;  The man pages There are several ways in which users obtain help. One of the most well known way would be to use the man pages. However, these days most people do not use the man pages anymore.\n$ man  For example, if you want to take a look at the man pages for the ls command, you will just need to do\n$ man ls  The ls command List in long format all the files and directories in your home directory.\nAnswer\n$ ls -l  The main challenge of this question is so that students understand how to use the ls command.\nThere are several points to take note in this question. For example, what is the meaning of long format? What does it mean by all files and directories?\nOne interesting thing is that most people do not know that the ls command can actually be given a file.\nSo, the various accepted answers for this question are\n$ ls -l $ ls --all -l $ ls -al  List in long format all the files and directories (top-level only) in the /usr/local directory, sorted by the time of last modification.\n$ ls -lt /usr/local  One interesting thing about Ubuntu is the way it manages time. For example, if you use the command stat on a file.\n File: examples.desktop Size: 8980 Blocks: 24 IO Block: 4096 regular file Device: 10306h/66310d Inode: 3145732 Links: 1 Access: (0644/-rw-r--r--) Uid: ( 1000/ jian) Gid: ( 1000/ jian) Access: 2019-10-09 08:43:17.558138350 +1100 Modify: 2018-10-29 21:38:37.957796856 +1100 Change: 2018-10-29 21:38:37.957796856 +1100 Birth: -  Challenge 3\nCreate the following directory structure.\ngraph TD S( Your Home Directory ) A( monash ) B( personal ) C( documents ) D( data ) E( temp ) F( documents ) S -- A S -- B A -- C A -- D A -- E B -- F  In order to create the directory structure, there are several ways. One way to do is would be to use several mkdir commands.\n$ mkdir monash $ mkdir personal $ mkdir monash/documents $ mkdir monash/data $ mkdir monash/temp $ mkdir personal/documents  However, you can achieve the same result by using a single mkdir command. At the end of the day if you look at the manual for mkdir, it does mention that it can be used to create directories.\n$ mkdir -p monash personal monash/documents monash/data monash/temp personal/documents  Change into the ~/monash/temp directory. The special character ~ means \u0026ldquo;a shortcut to your home directory\u0026rdquo;\nChange into your home directory. How many ways can you do this?\n$ cd ~ $ cd $ cd $HOME  References 1. Wikipedia Filesystem Hierarchy Standard\n"},{"uri":"https://jianliew.me/blog/blog/october-2019/percentage/","title":"Reddit Chart","tags":["Reddit","Chart","Visualisation"],"description":"","content":"  The charts here are visualisation of the AmIthea-hole subreddit which can be found here\nThe reason this post is made, is so that it would easier to see the percentage of votes of a certain type.\nPlease note that the posts here are generated based on the Reddit website by doing GET requests. So, it is based on their current entries.\n    Abbreviation Meaning     YTA You\u0026rsquo;re the A-hole   NTA Not the A-hole   ESH Everyone sucks here   NAH No A-holes here   INFO Not Enough Info    Posts   let summary = []; let parseResult = (link) = { const endPoint = \"https://reddit.com\" + link + \".json?limit=80\u0026jsonp=?\"; let replies = \"\"; $.getJSON(endPoint, function(data){ let title = (data[0].data.children[0].data[\"title\"]); replies = data[1][\"data\"].children; let url = \"https://reddit.com\" + link; let noOfReplies = replies.length; let countNTAAppearance = 0; let nta = \"NTA\"; let countYTAAppearance = 0; let countESHAppearance = 0; let countNAHAppearance = 0; let countINFOAppearance = 0; for (let i = 0; i { let output = \"\" + jsonResult[\"title\"] + \"\"; let out = output + \"Click here to view post in context.\n\"; $(\".result\").append(\"\" + out +\"\"); $(\"#\" + jsonResult[\"id\"] + \"_link\").prop(\"href\", jsonResult[\"url\"]); $(\".result\").append(\"\n\"); let id = \"#\" + jsonResult[\"id\"]; const data = { labels: [\"NTA\",\"YTA\",\"ESH\",\"NAH\",\"INFO\"], datasets: [ { name: \"data\", charType: 'percentage', values: [ jsonResult[\"countNTAAppearance\"], jsonResult[\"countYTAAppearance\"], jsonResult[\"countESHAppearance\"], jsonResult[\"countNAHAppearance\"], jsonResult[\"countINFOAppearance\"], ] } ] } const chart = new frappe.Chart(id, { data: data, type: 'percentage', colors: ['#33691e', '#b71c1c', '#f47e17','#1a237e','#e8eaf6'] }) } let getPost = () = { let result = \"\"; let entries = []; let endPoint = \"https://reddit.com/r/amitheasshole.json?limit=50\u0026jsonp=?\" $.getJSON(endPoint, function(data){ result = data; entries = result[\"data\"].children; for(let i = 0; i  .shadow { box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1); padding-right: 1em; padding-left: 1em; padding-top: 1em; }  "},{"uri":"https://jianliew.me/blog/thepragmatic/","title":"Pragmatic Programmer","tags":[],"description":"","content":" Programming is a Craft As a programmer, you are part listener, part advisor, part listener, part advisor, part interpreter, and part dictator.1\nWe try to capture requirements and express them so that a machine can do it justice.\n1. The Pragmatic Programmer\n"},{"uri":"https://jianliew.me/blog/teaching/ubuntu/","title":"Ubuntu","tags":[],"description":"","content":" Command Line This blog post is under construction.\n The entries in this blog are based on materials for the Computer Architecture \u0026amp; Operating Systems Unit done at the Masters level.\nThis unit is not done in the traditional manner but it focuses heavily on understanding and using the command line.\nSince this unit will no longer be offered, this blog post will serve as a reminder what the basic commands taught in this unit.\n"},{"uri":"https://jianliew.me/blog/teaching/uml/","title":"UML","tags":[],"description":"","content":" Unified Modelling Language State Machines What are state machines?\ngraph LR A(Open) B(Close) A--B  "},{"uri":"https://jianliew.me/blog/teaching/uml/introduction/","title":"What are State Machine Diagrams?","tags":["UML","State Machine","State Chart"],"description":"","content":" Posted - Tue 8 Oct 07:49:09 AEDT 2019\nThis blog post is incomplete.\n This blog entry assumes that the reader has a basic understanding of UML diagrams and would wish to understand more regarding state machine diagrams.\n Introduction This article is written based on my teaching experiencing in Monash University Australia (Faculty of Information Technology) for the unit Software Engineering.\nOften times, one of the most misunderstood diagram in UML is the state machine. These are also called state charts at times, as we often use terms interchangeably. The semantical difference between two of these diagrams are miniscule at best.\nstateDiagram [*] -- Open Open -- Closed Closed -- [*]  A simple initial state chart for the state of a door.\nIn fact, for most people, UML is perceived to be something that is not very useful in the development world. The main reason, is because the lack of understanding how the diagrams would relate to a real world application. When I first learn about UML state machines, I often confuse it with other diagrams like the flow chart as well as the activity diagram. I would also question its usefulness. Over time, I realised that it is the most useful diagrams in UML. I would rank it second in terms of importance, the first spot being the class diagram itself.\nI will attempt to explain why in this blog post.\nRemember that at the end of the day, diagrams are very useful to gain a better understanding of the system. As the saying goes, a picture tells a thousand words. The very first thing to understand is that a state chart is a dynamic modelling technique. It focuses on identifying the behavior of your system, specific to instances of a single class. 1\nThe main keywords here are\n A Single Class Dynamic  Let\u0026rsquo;s try to understand these keywords in more details.\nA single class The key features of a state machine, is that it used to model a specific instance of a single class. This concept is at utmost importance when dealing with state diagrams. Not two classes, not three classes but a single class. Before we move on, lets see an example of a class diagram for now. Remember that normally the construction of a state diagram happens after the class diagram.\ngraph LR A[Student] B[Unit] A -- B  A simple class diagram. (Initial level)\nThe example above is a simplification of what a class diagram is at its very basic nature. Two classes, Student and Unit and the Student class using the Unit class.\npublic class Student { private String firstName; private String lastName; private Unit unit; // Other methods omitted.. }  public class Unit { private String name; private String description; // Other methods omitted.. }  So, where does the state machine come into the picture in this situation? Since the state machine diagram aims to model a single class. Which class would we model here? Do we model both of them or just one? The answer is pretty simple, we actually attempt to do a state chart of all of the classes.\nSince based on the diagram, the Student class is using the Unit class, we should start modelling the state chart from the Unit class. The very first steps when drawing the state machine diagram would be to list out all the possible states.\nRemember that the objective of modelling is always to understand the system in more detailed view. We would also like to understand requirements better. This can be achieved in real life by talking to the real clients and users. If it is a fictional scenario, assumptions would then be made.\n The more intellectually stimulating steps is probably where you list out the possible states in a state chart.\nSo, lets say the possible states of a Unit are\n Offered Not offered  stateDiagram [*] -- Offered Offered -- NotOffered NotOffered -- [*]  However, if you continue the thought process, there are probably more states which can only be derived by understanding the requirements further.\nFor example, if we apply the concept of 4W1H, we will attempt to understand more regarding the requirements itself.\n   Category Question     Who ?   Where ?   When ?   How ?    Dynamic One of the biggest difference regarding state diagrams in comparison to the other diagrams in UML is that it attempts to model the dynamic nature of a system. In comparison to the other diagrams, state machine diagrams can model something which is not captured by the class diagram, as well as the use case diagram.\nIt is very important to understand that over time, the state of a class changes. In the semantical sense, dynamic conveys the meaning of (of a process or system) characterised by constant change, activity, or progress.\nstateDiagram [*] -- Offered Offered -- NotOffered NotOffered -- [*]  So, if we take a look at our current state chart, what we would like to know is, how does it shift from one state into another state.\nDiagrams P.S. - The real reason I wanted to make to blog post, is actually just to use mermaid diagrams.\nReferences 1. UML 2 State Machine Diagrams: An Agile Introduction\n"},{"uri":"https://jianliew.me/blog/blog/october-2019/programmming/","title":"Reddit Word Cloud ","tags":["Reddit","Chart","Visualisation"],"description":"","content":"   The word cloud generated here is based on the /r/programming subreddit for reddit.com The reason this post is made, is so that it would easier to see the word that appeared the most for the day. Even though the use of a word cloud is not exactly a good representation of occurrence, it still looks nice. Please note that the posts here are generated based on the Reddit website by doing GET requests. So, it is based on their current entries. So, it will be refreshed when the page is reloaded.\n    // Based on http://bl.ocks.org/joews/9697914 with modifications. let words = \"\"; let freq = \"\"; let arr = \"\"; var stopWords = [ 'about', 'after', 'all', 'also', 'am', 'an', 'and', 'another', 'any', 'are', 'as', 'at', 'be', 'because', 'been', 'before', 'being', 'between', 'both', 'but', 'by', 'came', 'can', 'come', 'could', 'did', 'do', 'each', 'for', 'from', 'get', 'got', 'has', 'had', 'he', 'have', 'her', 'here', 'him', 'himself', 'his', 'how', 'if', 'in', 'into', 'is', 'it', 'like', 'make', 'many', 'me', 'might', 'more', 'most', 'much', 'must', 'my', 'never', 'now', 'of', 'on', 'only', 'or', 'other', 'our', 'out', 'over', 'said', 'same', 'see', 'should', 'since', 'some', 'still', 'such', 'take', 'than', 'that', 'the', 'their', 'them', 'then', 'there', 'these', 'they', 'this', 'those', 'through', 'to', 'too', 'under', 'up', 'very', 'was', 'way', 'we', 'well', 'were', 'what', 'where', 'which', 'while', 'who', 'with', 'would', 'you', 'your', 'a', 'i', 'its', 'why' ]; // https://stackoverflow.com/questions/5631422/stop-word-removal-in-javascript function remove_stopwords(str) { res = [] words = str.split(' ') for(i=0;ib.size - a.size); sorted = sorted.slice(0, 50); for(let i = 0; i { let result = \"\"; let endPoint = \"https://reddit.com/r/programming.json?limit=1000\u0026jsonp=?\" $.getJSON(endPoint, function(data){ result = data; let entries = result[\"data\"].children; for(let i = 0; i  @media only screen and (min-width: 1000px) { .row { display: flex !important; } .column { flex: 50% !important; } }  "},{"uri":"https://jianliew.me/blog/blog/october-2019/hk/","title":"Sentiment Analysis","tags":["Reddit","Chart","Visualisation","Hong Kong","Percentage"],"description":"","content":"  Sentiment Analysis for the Sub-Reddit \u0026ldquo;HongKong\u0026rdquo; This post will perform sentiment analysis using AFINN. AFINN is a list of words rated for valence rated with an integer between minus five(negative) and plus five (positive). This implementation uses AFINN-en-165. 1\nThis approach however is a very naive approach as it does not build any models to determine the context of the usage of the word itself.\nPlease note that the posts here are generated based on the Reddit website by doing GET requests. So, it is based on their current entries. So, it will be refreshed when the page is reloaded.\n References 1. AFINN Sentiment Analysis\n   var stopWords = [ 'about', 'after', 'all', 'also', 'am', 'an', 'and', 'another', 'any', 'are', 'as', 'at', 'be', 'because', 'been', 'before', 'being', 'between', 'both', 'but', 'by', 'came', 'can', 'come', 'could', 'did', 'do', 'each', 'for', 'from', 'get', 'got', 'has', 'had', 'he', 'have', 'her', 'here', 'him', 'himself', 'his', 'how', 'if', 'in', 'into', 'is', 'it', 'like', 'make', 'many', 'me', 'might', 'more', 'most', 'much', 'must', 'my', 'never', 'now', 'of', 'on', 'only', 'or', 'other', 'our', 'out', 'over', 'said', 'same', 'see', 'should', 'since', 'some', 'still', 'such', 'take', 'than', 'that', 'the', 'their', 'them', 'then', 'there', 'these', 'they', 'this', 'those', 'through', 'to', 'too', 'under', 'up', 'very', 'was', 'way', 'we', 'well', 'were', 'what', 'where', 'which', 'while', 'who', 'with', 'would', 'you', 'your', 'a', 'i', 'its', 'why' ]; // https://stackoverflow.com/questions/5631422/stop-word-removal-in-javascript let parseResult = (link) = { const endPoint = \"https://reddit.com\" + link + \".json?limit=100\u0026jsonp=?\"; let replies = \"\"; let noOfReplies = 0; $.getJSON(endPoint, function(data){ let title = (data[0].data.children[0].data[\"title\"]); replies = data[1][\"data\"].children; let url = \"https://reddit.com\" + link; noOfReplies = replies.length; let repliesText = \"\"; let result = { \"id\" : data[0].data.children[0].data[\"id\"], \"url\": url, \"title\": title, \"negative\": 0, \"neutral\": 0, \"positive\": 0 } for (let i = 0; i 0: result[\"positive\"] = result[\"positive\"] + 1; break; case score { let output = \"\" + jsonResult[\"title\"] + \"\"; let out = output + \"Click here to view post in context.\n\"; $(\".result\").append(\"\" + out +\"\"); $(\"#\" + jsonResult[\"id\"] + \"_link\").prop(\"href\", jsonResult[\"url\"]); $(\".result\").append(\"\n\"); let id = \"#\" + jsonResult[\"id\"]; const data = { labels: [\"Positive\",\"Negative\",\"Neutral\"], datasets: [ { name: \"data\", charType: \"percentage\", values: [ jsonResult[\"positive\"], jsonResult[\"negative\"], jsonResult[\"neutral\"] ] } ] } const chart = new frappe.Chart(id, { data: data, type: 'percentage', colors: ['#33691e', '#b71c1c','#e8eaf6'] }) } let buildFreq = (repliesText) = { if (repliesText === undefined) return 0; let convert = repliesText.replace(/[^\\w\\s]/gi, '').toLowerCase().split(\" \"); let totalScore = 0; for(let i = 0; i { let result = \"\"; let entries = []; let endPoint = \"https://reddit.com/r/hongkong.json?limit=30\u0026jsonp=?\" $.getJSON(endPoint, function(data){ result = data; entries = result[\"data\"].children; for(let i = 0; i  .shadow { box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1); padding-right: 1em; padding-left: 1em; padding-top: 1em; }  "},{"uri":"https://jianliew.me/blog/blog/october-2019/topstories/","title":"Hacker News Word Cloud ","tags":["Hacker News","Chart","Visualisation"],"description":"","content":"   The word cloud generated here is based on the website hacker news. The reason this post is made, is so that it would easier to see the word that appeared the most for the day. Even though the use of a word cloud is not exactly a good representation of occurrence, it still looks nice. Please note that the posts here are generated based on the Hacker News API by doing GET requests. So, it is based on their current entries. So, it will be refreshed when the page is reloaded.\n    // Based on http://bl.ocks.org/joews/9697914 with modifications. let words = \"\"; let freq = [\"\"]; let arr = \"\"; var stopWords = [ 'about', 'after', 'all', 'also', 'am', 'an', 'and', 'another', 'any', 'are', 'as', 'at', 'be', 'because', 'been', 'before', 'being', 'between', 'both', 'but', 'by', 'came', 'can', 'come', 'could', 'did', 'do', 'each', 'for', 'from', 'get', 'got', 'has', 'had', 'he', 'have', 'her', 'here', 'him', 'himself', 'his', 'how', 'if', 'in', 'into', 'is', 'it', 'like', 'make', 'many', 'me', 'might', 'more', 'most', 'much', 'must', 'my', 'never', 'now', 'of', 'on', 'only', 'or', 'other', 'our', 'out', 'over', 'said', 'same', 'see', 'should', 'since', 'some', 'still', 'such', 'take', 'than', 'that', 'the', 'their', 'them', 'then', 'there', 'these', 'they', 'this', 'those', 'through', 'to', 'too', 'under', 'up', 'very', 'was', 'way', 'we', 'well', 'were', 'what', 'where', 'which', 'while', 'who', 'with', 'would', 'you', 'your', 'a', 'i', 'its', 'why', '', 'ask','hn','s' ]; // https://stackoverflow.com/questions/5631422/stop-word-removal-in-javascript function removeStopWords(str) { res = [] words = str.split(' ') for(i=0;ib.size - a.size); sorted = sorted.slice(0, 50); for (let i = 0; i response.json()) }; function getPages(noOfPages){ let promiseArray = []; for(let i = 1; i { let titles = []; for(let i = 0; i  @media only screen and (min-width: 1000px) { .row { display: flex !important; } .column { flex: 50% !important; } }  "},{"uri":"https://jianliew.me/blog/blog/october-2019/ga/","title":"Genetic Algorithm","tags":["Genetic Algorithm","Selection","Cross Over","Phrase Solver"],"description":"","content":" This post is a simple implementation of Genetic Algorithm GA. Here, you would start with a random string and end up with the target string.\n This post is heavily inspired based on this website. However, I created the codes with a very different methodology to also include newer JavaScript methods like using classes and etc.\n Cross Over Method One Point Two Point Uniform PMX    Selection Method Tournament Random Rank Roulette Wheel    Target String   Run\n\n\nGenerationFitnessString     Lessons from this post  The web worker is often times cached for a longer period in production/live environments. Users would have a better experience if it is not required for them to do a hard refresh on the browsers. One easy way is to use the best practice to load the web worker in the head. Others suggested to versioning web-workers.\n The web worker at times, does not like while loops. It would be better if for loops are used instead.\n The cross over methodology for GA needs to be implemented with complexity in mind.\n Using jQuery might not be the best idea as the hide() and show() which manipulates the display either changing to none or block does not work well on mobile browsers. Perhaps not using jQuery would be better.\n Designing an encoding is very important. For example, in a knapsack problem there are only two choices. So, each item can either be true or false.\n  References  Python Easy GA   .my-custom-scrollbar { position: relative; height: 200px; overflow: auto; } .table-wrapper-scroll-y { display: block; }   const entry = document.querySelector(\"#targetString\"); const result = document.querySelector(\".result\"); const cm = document.getElementById(\"crossOverMethod\"); const sm = document.getElementById(\"selectionMethod\"); const button = document.getElementById(\"run\"); $(\".result-table\").hide(); if (window.Worker) { const myWorker = new Worker(\"/blog/scripts/ga-worker.js\"); let isResultTableShown = false; cm.onchange = function() { result.innerHTML = \"\"; if (entry.value.length = 100 || entry.value.length == 0) return; }; button.onclick = function() { if (entry.value == \"\") return; $(\".result-table\").show(); result.innerHTML = \"\"; let crossOverMethod = cm.options[cm.selectedIndex].value; let selectionMethod = sm.options[sm.selectedIndex].value; myWorker.postMessage([crossOverMethod, selectionMethod, entry.value]); } entry.onchange = function() { result.innerHTML = \"\"; if (entry.value.length = 100 || entry.value.length == 0) return; }; myWorker.onmessage = function(e) { let text = result.innerHTML; result.innerHTML = \"\" + e.data[0] + \"\" + e.data[1] + \"\" + e.data[2]+\"\" + text; if (isResultTableShown == false){ isResultTableShown = true; $(\".result-table\").show(); } }; } else { console.log(\"Your browser doesn't support web workers.\"); }  "},{"uri":"https://jianliew.me/blog/teaching/","title":"Teaching","tags":[],"description":"","content":" Teaching This blog post is under construction.\n "},{"uri":"https://jianliew.me/blog/blog/october-2019/tsp/","title":"TSP using GA","tags":["Genetic Algorithm","Selection","Cross Over","TSP"],"description":"","content":"   \nThis post uses GA to generate a high quality solution of the Travelling Salesman Problem.\n  Travelling Salesman Problem using Genetic Algorithm This blog post is regarding using genetic algorithm to solve the Travelling Salesman Problem. In a one liner the TSP asks the following question: Given a list of cities and the distances between each pair of the cities, what is the shortest possible route that visits each city and returns to the origin city?\u0026rdquo;\nThe conditions in this scenario are that no point can be visited twice and it must return to the starting point. The selected starting point here is New York. (The starting point does not really matter in this scenario.). There are times however, that a point maybe the revisited more than once in order to achieve a better solution. The number of cities in this scenario is 13. In this specific implementation, it will never visit the same city twice.\nThe inspiration for this post is based on the google OR-Tools found here. This blog post, however uses Genetic Algorithm to obtain the answer. It is implemented with a web worker which runs in the browser based on JavaScript.\nI will also reuse the genetic algorithm implementation written for another blog post however with different fitness functions and different cross-over methodologies.\n   Location Coordinates Shorthand     New York 40, -74 A   Los Angeles 34, -118 B   Chicago 41, -87 C   Minneapolis 44, -93 D   Denver 39, -104 E   Dallas 32,-96 F   Seattle 47,-122 G   Boston 42,-71 H   San Francisco 37,-122 I   St. Louis 38,-90 J   Houston 29,-95 K   Phoenix 33,-111 L   Salt Lake City 40,-111 M    Total number of cities - 13.\nIn order to the Genetic Algorithm to work, a distance matrix needs to be given to it. This distance matrix is based on the \u0026ldquo;Euclidean Distance\u0026rdquo; and not Road Network distance. The distance matrix is obtained from here which has 13 cities in the United States.\nThe Genetic Algorithm Solution  Cross Over Method Ordered PMX    Selection Method Tournament Random Rank Roulette Wheel   Please click run to see the results based on different cross over and selection methods. \nRun It can be observed that the selection method random tends to not give a good result as it would defeat the purpose of the GA algorithm. The current mutation rate of the GA is set to 0.2 for this purpose. The starting population size is set to 20. Due to the nature of GA, each run under the given settings will give a different solution as I have defaulted the number of generations to 500. This includes running with the same cross over methodology and selection methodology.\n        The fitness in general would depend on the cross over methodology. For example, if the roulette wheel methodology is used, it can be observed that the average fitness tends to spike more. The suggested answer based on the Google OR tools is New York - Boston - Chicago - Minneapolis - Denver - Salt Lake City - Seattle - San Francisco - Los Angeles - Phoenix - Houston - Dallas - St Louis - New York which gives the total distance of 7293 miles which is also the minimal tour length.\nThe GA however does not obtain this solution. It does however, generate a high quality solution really quick.\n        Lessons from this post  The earth is not flat! Mapping putting coordinates using latitude and longitude on a chart, it would work in a different way so it displays beautifully. Latitude and longitude needs to be swapped.\n Most chart API do not let you specify both the x-axis and y-axis at the same time. This is especially true if the chart is able to generate SVG diagrams. SVG diagrams are always nicer and would generally be of more responsive nature at the end of the day.\n You can use a series graph to draw lines from a point to point in the chartist API. However, chartist API does not like the situation where there are two values on the same axis. (So it is not able to draw a straight line on the x-axis because of the nature of a series chart. An example of this is where there is a point on 30,55 and 30,65.\n There are specific data sets in which people benchmark their TSP solutions.\n The GA will downgrade into a random search if the mutation rate is too high. However, the mutation rate can always be change to tailor to the specific use case.\n   var defaultOptions = { currency: undefined, //accepts '£', '$', '€', etc. //e.g. 4000 = €4,000 tooltipFnc: undefined, //accepts function //build custom tooltip transformTooltipTextFnc: undefined, // accepts function // transform tooltip text class: undefined, // accecpts 'class1', 'class1 class2', etc. //adds class(es) to tooltip wrapper anchorToPoint: false, //accepts true or false //tooltips do not follow mouse movement -- they are anchored to the point / bar. appendToBody: false //accepts true or false //appends tooltips to body instead of chart container }; let RAD2DEG = 180 / Math.PI; let PI_4 = Math.PI / 4; /* The following functions take or return their results in degrees */ function y2lat(y) { return (Math.atan(Math.exp(y / RAD2DEG)) / PI_4 - 1) * 90; } function x2lon(x) { return x; } function lat2y(lat) { return lat } function lon2y(lon) { return lon; } // [0,7,2,3,4,12,6,1,11,10,5,9,0] new Chartist.Line(\".ct-chart\",[], { showLine: true, axisX: { type: Chartist.AutoScaleAxis, onlyInteger: true } }); new Chartist.Line(\".summary-chart\",[], { showLine: true, axisX: { type: Chartist.AutoScaleAxis, onlyInteger: true } }); const mapLocation = (x, y) = { return { x: y, y: x }; }; const locationA = mapLocation(lat2y(40), lon2y(-74) ); const locationB = mapLocation(lat2y(34), lon2y(-118 )); const locationC = mapLocation(lat2y(41), lon2y(-87) ); const locationD = mapLocation(lat2y(44), lon2y(-93) ); const locationE = mapLocation(lat2y(39), lon2y(-104 )); const locationF = mapLocation(lat2y(32), lon2y(-96) ); const locationG = mapLocation(lat2y(47), lon2y(-122.33 )); const locationH = mapLocation(lat2y(42), lon2y(-71) ); const locationI = mapLocation(lat2y(37), lon2y(-122.41 )); const locationJ = mapLocation(lat2y(38), lon2y(-90) ); const locationK = mapLocation(lat2y(29), lon2y(-95) ); const locationL = mapLocation(lat2y(33), lon2y(-111.07 )); const locationM = mapLocation(lat2y(40), lon2y(-111.89 )); const buildSeries = result = { let arrayResult = []; let array = result.split(\"\"); //arrayResult.push([locationA, determineLocation(array[1])]); for (let index = 1; index a.x - b.x); arrayResult.push(inner); } return arrayResult; }; const determineLocation = character = { let location = undefined; switch (character) { case \"A\": return locationA; case \"B\": return locationB; case \"C\": return locationC; case \"D\": return locationD; case \"E\": return locationE; case \"F\": return locationF; case \"G\": return locationG; case \"H\": return locationH; case \"I\": return locationI; case \"J\": return locationJ; case \"K\": return locationK; case \"L\": return locationL; case \"M\": return locationM; } }; const button = document.getElementById(\"run\"); const cm = document.getElementById(\"crossOverMethod\"); const sm = document.getElementById(\"selectionMethod\"); const title = document.getElementById(\"chart-title\"); const summary = document.getElementById(\"summary-chart\"); const answerBuilder = { labels: [], series: buildSeries(\"AHCDEMGIBLKFJA\") }; var defaultOptions = { labelClass: 'ct-label', labelOffset: { x: 0, y: -10 }, textAnchor: 'middle', labelInterpolationFnc: Chartist.noop }; var chart = new Chartist.Line( \"#cities\", answerBuilder, { showLine: true, axisX: { type: Chartist.AutoScaleAxis, onlyInteger: true }, plugins: [ Chartist.plugins.ctPointLabels({ textAnchor: \"middle\", }) ] } ); if (window.Worker) { const tspWorker = new Worker(\"/blog/scripts/tsp-worker.js\"); tspWorker.onmessage = function(e) { let result = \"A\" + e.data[0] + \"A\"; const seriesBuilder = { labels: [], series: buildSeries(result) }; title.innerHTML = \"Total Distance = \" + e.data[1]; summary.innerHTML = \"Average fitness (Blue)/ Best fitness(Red) over Generation\"; new Chartist.Line( \".ct-chart\", seriesBuilder, { showLine: true, axisX: { type: Chartist.AutoScaleAxis, onlyInteger: true }, plugins: [ Chartist.plugins.ctPointLabels({ textAnchor: \"middle\", }) ] } ); const seriesSummary = { labels: e.data[2][0], series: [e.data[2][1], e.data[2][2]] }; new Chartist.Line( \".summary-chart\", seriesSummary, { showLine: true, fullWidth: false, chartPadding: { right: 40 }, axisX: { showLabel: false }, plugins: [ ] } ); }; button.onclick = function() { let crossOverMethod = cm.options[cm.selectedIndex].value; let selectionMethod = sm.options[sm.selectedIndex].value; tspWorker.postMessage([crossOverMethod, selectionMethod]); }; }   @media only screen and (min-width: 1000px) { .row { display: flex !important; } .column { flex: 50% !important; } .columnOne { flex: 30% !important; } .columnTwo { flex: 70% !important; } .ct-chart, .summary-chart{ width: 30rem; } #cities{ display:block; margin: auto; width: 40rem; } } .ct-series-a .ct-line, .ct-point { stroke: blue; stroke-width: 1px; } #run{ background-color: blue !important; }  "},{"uri":"https://jianliew.me/blog/blog/october-2019/promiseall/","title":"Promise All","tags":["JavaScript","Promise","API"],"description":"","content":" This post is a an entry to describe a use case when the Promise.all JavaScript method is needed. The official reference can be found here. This assumes that the reader has a basic understanding of how promises work.\n Before we start, there is a need to understand how certain RESTful services are structured. For example, the Hacker News API has the end point called topstories. This end point however, does not contain any other information besides a list of item IDs. So, if you would like to obtain the top 10 post including their title, there would be a need to do several GET request to fetch them all.\nThe code example below would demonstrate a situation where the Promise.all becomes useful.\nconst getTopStoriesId = () =\u0026gt; { let endPoint = \u0026quot;https://hacker-news.firebaseio.com/v0/topstories.json\u0026quot;; return fetch(endPoint, { mode: \u0026quot;cors\u0026quot; }).then((response) =\u0026gt; response.json()); }; const getItem = (itemNumber) =\u0026gt; { let endPoint = \u0026quot;//hacker-news.firebaseio.com/v0/item/\u0026quot; + itemNumber + \u0026quot;.json\u0026quot;; return fetch(endPoint, { mode: \u0026quot;cors\u0026quot; }).then((response) =\u0026gt; response.json()); } const topStories = () =\u0026gt; getTopStoriesId().then((result) =\u0026gt; { let promiseArray = []; result.forEach((element) =\u0026gt; { promiseArray.push(getItem(element)); }); return Promise.all(promiseArray); });  Code Example of the Promise.all Flowchart Representation graph TD S(Start) A(Fetch from /topstories) B{Valid?} C(Parse all IDs from /topstories) D(Create multiple Promises with Fetch using the /items/id end point based on the IDs obtained) E(Create the Promise.all) F{Valid?} G(Results) Y(Report Error) Z(End) S--A A--B B-- Valid Response --C B-- Invalid Response --Y C--D D--E E--F F-- Invalid Response --Y F-- Valid Response --G Y--Z G--Z  Fig 1. Flow Chart of the Promise.all Lessons from this blog post.  The then function returns a promise as well. Fetch is significantly easier to use in comparison to its jQuery counterparts. However, considerations needs to be taken into account when using it in static sites that does not have Babel or modernizr. There are a lot of reasons a lot of users decided to create their own wrappers around the Hacker News API. Perhaps, it is deemed that their top stories and end up which does summary could be done in a different way. But HN itself is a very opinionated community. Mermaid diagrams are useful and break tags can be introduced in them. CORS and JSONP exist. Cors is more modern and easier to use compared to using JSONP. Using jQuery can make the codes very unreadable and creating call back hell easier.  References  https://stackoverflow.com/questions/38180080/when-to-use-promise-all   const getTopStoriesId = () = { let endPoint = \"https://hacker-news.firebaseio.com/v0/topstories.json\"; return fetch(endPoint, { mode: \"cors\" }).then((response) = response.json()); }; const getItem = (itemNumber) = { let endPoint = \"//hacker-news.firebaseio.com/v0/item/\" + itemNumber + \".json\"; return fetch(endPoint, { mode: \"cors\" }).then((response) = response.json()); } const topStories = () = getTopStoriesId().then((result) = { let promiseArray = []; result.forEach((element) = { promiseArray.push(getItem(element)); }); return Promise.all(promiseArray); }); // const stories = topStories().then((result) = { // let titleStrings = \"\"; // result.forEach((element) = {titleStrings += element[\"title\"].toLocaleUpperCase()}); // console.log(titleStrings); // });  "},{"uri":"https://jianliew.me/blog/blog/october-2019/nearestneighbour/","title":"k-Nearest Neighbour on Maps","tags":[],"description":"","content":" One of the most common query when working with maps is the nearest neighbour query. This post will explain how to accomplish an easy nearest neighbour query.\n We will first start with a data set or coordinates.\n\nThe Nearest Neighbour Query on the map aims to return the nearest neighbour of a point. So, in the example, it can be seen that the 1st Nearest Neighbour of New York would be Boston and the 2nd Nearest Neighbour of New York Would be Chicago. This goes on for the k value. The interesting thing to remember is that the starting point of the query often times do not start from the set of existing points.\nWhat if we would like to query 20 nearest neighbour from a query point? This solution can easily be answered with a naive linear query if we do not have an existing data structure. Basically we can just calculate the distance from each point (each city) to our location to determine which ones are the nearest 20 points to us.\nHowever, in bigger applications where there would be more points (Think 1 million points), data structures like the R-tree would play a very important role to perform such queries. At the end of the day, it is important to understand that algorithms operate on data structures.\nThe naive solution would be to do something as follows. (Written in JavaScript)\nconst sortPointsBasedOnDistance = (queryPoint, points) =\u0026gt; { points.sort((pointA, pointB) =\u0026gt; { return ( calculateDistance(queryPoint, pointA) - calculateDistance(queryPoint, pointB) ); }); }; const calculateDistance = (startingPoint, endingPoint) =\u0026gt; { let x = endingPoint.x - startingPoint.x; let y = endingPoint.y - startingPoint.y; return Math.hypot(x, y); }; const createPoint = (name, x, y) =\u0026gt; ({ name: name, x: x, y: y }); let points = []; points.push( createPoint(\u0026quot;New York\u0026quot;, 40, -74), createPoint(\u0026quot;Chicago\u0026quot;, 41, -87), createPoint(\u0026quot;Minneapolis\u0026quot;, 44, -93), createPoint(\u0026quot;Boston\u0026quot;, 42, -71), createPoint(\u0026quot;Denver\u0026quot;, 39, 104), createPoint(\u0026quot;Dallas\u0026quot;, 32, -96) ); let queryPoint = createPoint(\u0026quot;Query Point\u0026quot;, 40, -74); sortPointsBasedOnDistance(queryPoint, points); console.log(points);  Lessons from this blog post.  It is hard to explain a year longs\u0026rsquo; research in a single blog post. Console.log in JavaScript is passed a reference to the object, thus the value will actually change when the object changes. It is not the value of he object at the moment in time where you call console.log. There are not many existing libraries written in JavaScript that deals with these specialised queries. (Perhaps more investigation is needed) The sort function in JavaScript is an ES6 feature, careful consideration needs to be taken into account when using it and also be careful with the curly bracers and no curly bracers. Creating an object requires brackets \u0026ldquo;(\u0026rdquo; wrapped around \u0026ldquo;{\u0026rdquo; parenthesis.   const sortPointsBasedOnDistance = (queryPoint, points) = { points.sort((pointA, pointB) = calculateDistance(queryPoint, pointA) - calculateDistance(queryPoint, pointB) ) } const calculateDistance = (startingPoint, endingPoint) = { let x = endingPoint.x - startingPoint.x; let y = endingPoint.y - startingPoint.y; return Math.hypot(x, y); } const createPoint = (name, x,y) = ({ name: name, x: x, y: y }); let points = []; points.push( createPoint(\"New York\",40,-74), createPoint(\"Chicago\",41,-87), createPoint(\"Minneapolis\", 44,-93), createPoint(\"Boston\", 42,-71), createPoint(\"Denver\", 39, 104), createPoint(\"Dallas\", 32, -96) ); let queryPoint = createPoint(\"Query Point\",40, -74); sortPointsBasedOnDistance(queryPoint, points); console.log(points);  "},{"uri":"https://jianliew.me/blog/blog/october-2019/java13/","title":"Java 13 on Ubuntu","tags":[],"description":"","content":"Installing Java 13 on Ubuntu is pretty simple.\nAll that was needed was\nsudo apt install openjdk-13-jdk sudo update-alternatives --config java  Of course, it would be better if you are on the latest version of Ubuntu so that the apt actually finds it there. (I am currently using Ubuntu 19.04). You can obtain this information by\nlsb_release -a  After that, all that was needed was to properly configure the Java path where you can easily find where it is from doing\nsudo update-alternatives --config java  Please do note that using the which java and using that path does not work as it is not the SDK.\n"},{"uri":"https://jianliew.me/blog/blog/october-2019/voronoi/","title":"Voronoi Diagram","tags":["Nearest Neighbour","Maps","Voronoi"],"description":"","content":"   One of the most common query when working with maps is the nearest neighbour query. This blog post will use Voronoi Diagrams to explain more regarding the nearest neighbour query.\n Below is an example of a Voronoi diagram generated using d3.js. One of the good use case of a voronoi diagram in real life applications would be where would be finding a place to build emergency services. This place should have the most number of neighbouring regions. For example, if you click on the region in the voronoi diagram below, you can see how many regions in which it would consider this region to be its neighbour. The diagram is randomly generated based on a number of points and thus every refresh of this page will show a different voronoi diagram.\n Fig 1. Voronoi Diagram generated with 30 random points\n -- The codes to create this diagram are as follows :-\nconst createVoronoi = () =\u0026gt; { const width = 600; const height = 600; const vertices = d3.range(30).map(function(d) { return [Math.random() * width, Math.random() * height]; }); const delaunay = d3.Delaunay.from(vertices); const voronoi = delaunay.voronoi([0, 0, width, height]); let svg = d3 .select(\u0026quot;#canvas\u0026quot;) .append(\u0026quot;svg\u0026quot;) .attr(\u0026quot;viewBox\u0026quot;, `0 0 600 600`); const mesh = svg .append(\u0026quot;path\u0026quot;) .attr(\u0026quot;fill\u0026quot;, \u0026quot;none\u0026quot;) .attr(\u0026quot;stroke\u0026quot;, \u0026quot;#ccc\u0026quot;) .attr(\u0026quot;stroke-width\u0026quot;, 1) .attr(\u0026quot;d\u0026quot;, voronoi.render()); const bounds = svg .append(\u0026quot;path\u0026quot;) .attr(\u0026quot;fill\u0026quot;, \u0026quot;none\u0026quot;) .attr(\u0026quot;stroke\u0026quot;, \u0026quot;#ccc\u0026quot;) .attr(\u0026quot;stroke-width\u0026quot;, 1) .attr(\u0026quot;d\u0026quot;, voronoi.renderBounds()); const points = svg .append(\u0026quot;path\u0026quot;) .attr(\u0026quot;fill\u0026quot;, \u0026quot;black\u0026quot;) .attr(\u0026quot;stroke\u0026quot;, \u0026quot;#ccc\u0026quot;) .attr(\u0026quot;stroke-width\u0026quot;, 1) .attr(\u0026quot;d\u0026quot;, delaunay.renderPoints()); };  Example of a query I will now re-use my data set of point from an earlier blog entry and I will generate the voronoi diagram. Basically, I would use a query point as well to find out the nearest neighbour and the surrounding neighbours. The figure below shows that the d3-delaunay provides a simple functions that allows you to find the point in which is the closest to the query point. This is done by using delaunay.find(). So if you are inside the blue region, your closest point would be the point inside the blue region.\nIt\u0026rsquo;s surrounding neighbours could then be easily obtained once you have this point by using delaunay.neighbor() and passing the result of the first find function. So, the regions which are in teal would be the neighbours of the region in blue. All the other regions would be coloured in green. This simple data structure would allow you to easily obtain the nearest neighbour. However, of course, there is also the importance of the build time, insertion time and removal time as well.\n Fig 2. Voronoi Diagram for a NN query.\nThe codes to create this diagram are as follows const queryExample = () =\u0026gt; { let points = [ [40, 74], [34, 118], [41, 87], [44, 93], [39, 104], [32, 96], [47, 122], [42, 71] ]; // Function to transform the points so that it would work on the grid const transform = point =\u0026gt; { return [(point[0] / 90) * 500, (point[1] / 180) * 500]; }; let transformed = []; points.forEach(element =\u0026gt; { transformed.push(transform(element)); }); const delaunay = d3.Delaunay.from(points); const voronoi = delaunay.voronoi([0, 0, 500, 500]); // Call the draw Voronoi function. drawVoronoi(\u0026quot;#exampleQuery\u0026quot;, transformed); }; const drawVoronoi = (id, vertices, color) =\u0026gt; { const width = 500, height = 500; const delaunay = d3.Delaunay.from(vertices); const voronoi = delaunay.voronoi([0, 0, width, height]); let svg = d3 .select(id) .append(\u0026quot;svg\u0026quot;) .attr(\u0026quot;viewBox\u0026quot;, `0 0 500 500`); const mesh = svg .append(\u0026quot;path\u0026quot;) .attr(\u0026quot;fill\u0026quot;, \u0026quot;none\u0026quot;) .attr(\u0026quot;stroke\u0026quot;, \u0026quot;#ccc\u0026quot;) .attr(\u0026quot;stroke-width\u0026quot;, 1) .attr(\u0026quot;d\u0026quot;, voronoi.render()); const bounds = svg .append(\u0026quot;path\u0026quot;) .attr(\u0026quot;fill\u0026quot;, \u0026quot;none\u0026quot;) .attr(\u0026quot;stroke\u0026quot;, \u0026quot;#ccc\u0026quot;) .attr(\u0026quot;stroke-width\u0026quot;, 1) .attr(\u0026quot;d\u0026quot;, voronoi.renderBounds()); // Find the closest point to this coordinate. const ans = delaunay.find(40, 73); const neighbours = delaunay.neighbors(ans); for (const iterator of neighbours) { renderCell(svg, voronoi, iterator, d3.schemeTableau10[3]); } renderCell(svg, voronoi, ans, d3.schemeTableau10[0]); const points = svg .append(\u0026quot;path\u0026quot;) .attr(\u0026quot;fill\u0026quot;, \u0026quot;black\u0026quot;) .attr(\u0026quot;stroke\u0026quot;, \u0026quot;#ccc\u0026quot;) .attr(\u0026quot;stroke-width\u0026quot;, 1) .attr(\u0026quot;d\u0026quot;, delaunay.renderPoints()); }; const renderCell = (svg, voronoi, index, color) =\u0026gt; { svg .append(\u0026quot;path\u0026quot;) .attr(\u0026quot;fill\u0026quot;, color) .attr(\u0026quot;stroke\u0026quot;, \u0026quot;#ccc\u0026quot;) .attr(\u0026quot;stroke-width\u0026quot;, 1) .attr(\u0026quot;d\u0026quot;, voronoi.renderCell(index)); };  Lessons from this blog post.  The learning curve for d3.js is pretty insane. Voronois are pretty easy using d3. Generators can be iterated using the for\u0026hellip;of construct. MDN link There is a way to make SVG responsive. Refer this post.   const queryExample = () = { let points = [[40,74],[34,118],[41,87],[44,93],[39,104],[32,96] ,[47,122],[42,71]]; const transform = point = { return [point[0]/90 * 500, point[1]/180*500]; } let transformed = []; points.forEach(element = { transformed.push(transform(element)); }); const delaunay = d3.Delaunay.from(points); const voronoi = delaunay.voronoi([0, 0, 500, 500]); drawVoronoi(\"#exampleQuery\", transformed); } const renderCell = (svg, voronoi, index, color) = { svg.append(\"path\") .attr(\"fill\", color) .attr(\"stroke\",\"#ccc\") .attr(\"stroke-width\", 1) .attr(\"d\", voronoi.renderCell(index)); } const drawVoronoi = (id, vertices, color) = { const width = 500, height = 500; const delaunay = d3.Delaunay.from(vertices); const voronoi = delaunay.voronoi([0, 0, 500, 500]); let svg = d3.select(id) .append(\"svg\") .attr(\"viewBox\", `0 0 500 500`); //.attr(\"width\", width) //.attr(\"height\", height); const mesh = svg.append(\"path\") .attr(\"fill\", \"none\") .attr(\"stroke\", \"#ccc\") .attr(\"stroke-width\", 1) .attr(\"d\", voronoi.render()); const bounds = svg.append(\"path\") .attr(\"fill\", \"none\") .attr(\"stroke\",\"#ccc\") .attr(\"stroke-width\", 1) .attr(\"d\", voronoi.renderBounds()); const ans = delaunay.find(40,73); for (let index = 0; index { const width = 600, height = 600; // const vertices = d3.range(30).map(function(d) { // return [Math.random() * width, Math.random() * height]; // }); const radius = 10; const circles = d3.range(30).map(i = ({ x: Math.random() * (width - radius * 2) + radius, y: Math.random() * (height - radius * 2) + radius, })); const delaunay = d3.Delaunay.from(circles, d = d.x, d = d.y); const voronoi = delaunay.voronoi([0, 0, width, height]); let svg = d3.select(\"#canvas\") .append(\"svg\") .attr(\"viewBox\", `0 0 600 600`); // .attr(\"width\", width) // .attr(\"height\", height); // const circle = svg.append(\"g\") // .selectAll(\"circle\") // .data(circles) // .join(\"circle\") // .attr(\"cx\", d = d.x) // .attr(\"cy\", d = d.y) // .attr(\"r\", radius) // .attr(\"fill\", \"black\"); const mesh = svg.append(\"path\") .attr(\"fill\", \"none\") .attr(\"stroke\", \"#ccc\") .attr(\"stroke-width\", 1) .attr(\"d\", voronoi.render()); const bounds = svg.append(\"path\") .attr(\"fill\", \"none\") .attr(\"stroke\",\"#ccc\") .attr(\"stroke-width\", 1) .attr(\"d\", voronoi.renderBounds()); // for (let index = 0; index { let selected = undefined; const width = 1000, height = 1000; const circles = d3.range(30).map(function(d) { return [Math.random() * width, Math.random() * height]; }); const query = [Math.random() * width, Math.random() * height ]; const delaunay = d3.Delaunay.from(circles); const voronoi = delaunay.voronoi([0, 0, width, height]); let svg = d3.select(id) .append(\"svg\") .attr(\"viewBox\", `0 0 1000 1000`); const mesh = svg.append(\"path\") .attr(\"fill\", \"none\") .attr(\"stroke\", \"#ccc\") .attr(\"stroke-width\", 5) .attr(\"d\", voronoi.render()); const bounds = svg.append(\"path\") .attr(\"fill\", \"none\") .attr(\"stroke\",\"#ccc\") .attr(\"stroke-width\", 5) .attr(\"d\", voronoi.renderBounds()); const points = () = svg.append(\"path\") .attr(\"fill\", \"black\") .attr(\"stroke\",\"#ccc\") .attr(\"stroke-width\", 2) .attr(\"d\", delaunay.renderPoints()); points(); svg.on(\"click\", function() { var coords = d3.mouse(this); //mesh(); if (selected != undefined){ renderCell(svg, voronoi, selected, \"white\"); for (const iterator of delaunay.neighbors(selected)) renderCell(svg, voronoi, iterator, \"white\"); selected = undefined; } const ans = (delaunay.find(coords[0],coords[1])); selected = ans; renderCell(svg, voronoi, ans, d3.schemeTableau10[0]); points(); //console.log(ans); const neighbours = delaunay.neighbors(ans); for (const iterator of neighbours) { renderCell(svg, voronoi, iterator, d3.schemeTableau10[3]); }; }); }; //drawExampleVoronoi(); queryExample(); drawVoronoiWithPoints(\"#canvas\",30);  "},{"uri":"https://jianliew.me/blog/","title":"Contents","tags":[],"description":"","content":" Hello!   I am Jian.\nWelcome to my blog!\nFor the past 2.5 years, I have been working as a Teaching Associate with Monash University. I have taught both at the undergraduate level as well as postgraduate level. Overall, I have assisted over 100 students every semester to understand the course material and taught them how to apply critical thinking to every aspect of their studies.\nIt is my personal belief that, it is more important for a student to understand the underlying concepts before approaching a problem. Understanding how to solve a problem takes precedence over making the same mistakes over and over again just to see what will work.\nSubjects taught This is the list of the subjects that I have been involved in to date.\n   Unit Code Name Technology Stack     FIT1010 Introduction to Software Engineering Java7, Python 3, UML   FIT5032 Internet Applications Development ASP.NET MVC, C#, HTML5, JavaScript   FIT5042 Enterprise Application Development for the Web JEE, JSF, XHTML   FIT5120 Industry Experience Project Various Frameworks   FIT5136 Software Engineering Java7, UML   FIT5140 Advance Mobile Systems Swift, Python, RaspberryPi   FIT9131 Programming Foundations Java7   FIT9134 Computer Architecture and Operating Systems Shell Scripting, Bash, Ubuntu   FIT9135 Data Communications WireShark, Core Network Emulator    Nominations \u0026amp; Awards  Studio Mentor for FIT5120 Industry Experience Project. Worked closely with four teams of students to develop applications based on the suggestion of MYOB mentors. Teaching Excellence Nominee for multiple subjects.   let result = \"\"; let endPoint = \"https://programming-quotes-api.herokuapp.com/quotes/random\" $.getJSON(endPoint, function(data){ result = data; let text = \"\\\"\" + result[\"en\"] + \"\\\"\" + \"- \" + result[\"author\"] + \"\n\"; $(\"#quote\").html(text); });   .shadow { box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1); padding-right: 1em; padding-left: 1em; padding-top: 1em; padding-bottom: 0.5em; } .pull-right { text-align:right; }  "},{"uri":"https://jianliew.me/blog/tags/es6/","title":"ES6","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/javascript/","title":"JavaScript","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/sort/","title":"Sort","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/","title":"Tags","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/design-pattern/","title":"Design Pattern","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/java/","title":"Java","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/observer/","title":"Observer","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/singleton/","title":"Singleton","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/api/","title":"API","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/promise/","title":"Promise","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/cross-over/","title":"Cross Over","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/genetic-algorithm/","title":"Genetic Algorithm","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/selection/","title":"Selection","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/tsp/","title":"TSP","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/phrase-solver/","title":"Phrase Solver","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/chart/","title":"Chart","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/hacker-news/","title":"Hacker News","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/visualisation/","title":"Visualisation","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/debugging/","title":"Debugging","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/rubber-duck/","title":"Rubber Duck","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/maps/","title":"Maps","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/nearest-neighbour/","title":"Nearest Neighbour","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/voronoi/","title":"Voronoi","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/hong-kong/","title":"Hong Kong","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/percentage/","title":"Percentage","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/reddit/","title":"Reddit","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/coding-style/","title":"Coding Style","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/swift/","title":"Swift","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/bash/","title":"Bash","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/command-line/","title":"Command Line","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/cv/","title":"Curriculum Vitae","tags":[],"description":"","content":" Summary A passionate educator and technology lover with excellent programming and communication skills. Organized and driven with the innate ability to stay on the task.\nTeaching Experience Monash University, Melbourne (April 2015 - Current) Sessional Lecturer \u0026amp; Teaching Associate (Sessional)\nSubjects previously taught includes:\n   Unit Code Name     FIT1010 Introduction to Software Engineering   FIT5032 Internet Applications Development   FIT5042 Enterprise Web Applications   FIT5120 Industry Experience Project   FIT5136 Software Engineering   FIT9131 Programming Foundations in Java   FIT9134 Computer Architecture and Operating Systems   FIT9135 Data Communications    Key responsibilities  Confidently assist students to become independent and collaborative learners during each studio session by encouraging participation as well as the motivation to learn from each other. Provide laboratory instructions, accessing student performance, tutoring students and determining course grades by advising students to always understand the materials before approaching a problem scenario. Participate in examination markings and the evaluation of final grades of each student.  Achievements  Teaching Excellence Award Nominee for multiple subjects. Consistently achieving a Student Evaluation of Teaching and Units (SETU) score of 4 and above for each subject taught. Successfully mentored four teams to complete the industry experience project (FIT5120) subjects done in cooperation with Monash University and mentors from MYOB.  Education Master of Information Technology (Professional) - Monash University  Completed a thesis titled \u0026ldquo;Category R-tree\u0026rdquo; under the supervision of Assoc. Prof. David Taniar Faculty of Information Technology Merit Scholarship  Bachelor of Computer Science \u0026amp; Software Engineering - Swinburne University  Graduated with First Class Honors Swinburne University of Technology Merit Scholarship  "},{"uri":"https://jianliew.me/blog/tags/datetime/","title":"DateTime","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/design/","title":"Design","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/disclaimer/","title":"Disclaimer","tags":[],"description":"","content":"This web site is not authorised by Monash University and that any opinions expressed on the pages are those of the author and not those of the University.\n"},{"uri":"https://jianliew.me/blog/tags/document-database/","title":"Document Database","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/shell/","title":"Shell","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/state-chart/","title":"State Chart","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/state-machine/","title":"State Machine","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/timeline/","title":"Time Line","tags":[],"description":"","content":" "},{"uri":"https://jianliew.me/blog/tags/uml/","title":"UML","tags":[],"description":"","content":""}]