[{"uri":"https://jianliew.me/blog/archive/2019-10/guard/","title":"Explicit Else (Guard)","tags":["Swift","Coding Style"],"description":"","content":"Before we start, lets take a look at the grammar of a guard statement for the Swift language.\n Grammar of a Guard Statement\n  guard-statement\u0026ndash;\u0026gt; guard condition-list else code-block\n This was a conversation I had with a co-worker a couple of days back. I asked him, what is this guard in Swift? I have not been programming in Swift since iOS development made a shift from Objective C to Swift and I have not seen a guard statement used in any other languages I programmed in. It seems that guards are everywhere in Swift, but my coworker said that guards are something he never used. This is a very interesting notion. At the end of the day, each programmer has his or her own style. It is not wrong to not use guards at all but if so, why are guards everywhere?\n(In fact, guards were only added in Swift 2.0)\nLet's try to understand why guards are everywhere in Swift. Semantically, guards are just a methodology to practice defensive programming and the notion where you need to return early.\nThe main reason guards are so dominant in Swift is due to the fact there are Optionals.\nReferences  StackExchange post regarding guards here. Nested conditionals and guards. Post found here  "},{"uri":"https://jianliew.me/blog/entries/2019-11/firestore/","title":"Nested Data in Documents (FireStore)","tags":["Swift","DateTime","Design","Document Database"],"description":"","content":"Introduction When using Google Firestore, there is a need to put some thought into the way the data is structure. Each option would have an advantage or limitations depending on the use case.\n With JSON being everywhere, there are times when there is a need to figure out how to structure data in the Cloud Firestore.\nHere are a few common options.\n Nested data in documents Subcollections Root-level  The most important thing to remember that there is no perfect solution for structuring a Cloud Firestore database. The best and correct solution often times would be the solution that fis the needs and makes the job easier.\n    Type Advantages Limitations     Nested Easy to set up Nested documents isn't as scalable as other   Sub-collections Full query capability on sub-collections. Cannot easily delete sub-collections   Root-level collections Most flexible and most scalable long with powerful query capability. Getting data becomes more complex as data grows    Avoid using Time as Document ID One of the common things I have seen is that some developers often use a date or datetime as their document id as their collection name. There are actually several reasons this should not be done. (This is especially true for FireStore)\n Document IDs should not be monotonically increasing such as  Customer1, Customer2, Customer3, \u0026hellip;. Product1, Product2, Product3, \u0026hellip;. 2019-01-01, 2019-01,02, 2019-01-03,\u0026hellip;   Sequential IDs can lead to hotspots. Document IDs are Strings and parsing Strings are often times very troublesome.  For example, how would you query all documents on February? It would be super hard if they were stored as a String data type and you would be doing a lot of String transformations which is processor intensive and not needed at all. Document IDs in FireStore should not be stored as a date.   FireStore Queries. One of the benefits of FireStore is that allows you to write better queries in comparison to Firebase, thus if there is a field with the datatype of timestamp, it would allow you to do range queries on that field itself. This can only be done if the data type is timestamp. Time-zone. Depending on your use case, time zones play a very important factor. For example, if you are collecting data from a sensor, which time becomes important? Would it be Firebase Server time or would it be the time where the sensor itself is? What happens when Day Light Saving happens? Thus, it would always be a better idea to keep the time stamp with a time zone correctly.  References  Firebase. (2019). Choose a data structure | Firebase. [online] Available at: https://firebase.google.com/docs/firestore/manage-data/structure-data [Accessed 1 Nov. 2019]. Firebase. (2019). Perform simple and compound queries in Cloud Firestore | Firebase. [online] Available at: https://firebase.google.com/docs/firestore/query-data/queries [Accessed 1 Nov. 2019].  "},{"uri":"https://jianliew.me/blog/entries/2019-11/singletonobserverpattern/","title":"Singleton &amp; Observer Pattern (Java)","tags":["Java","Design Pattern","Singleton","Observer"],"description":"","content":" This blog post will demonstrate a simple use case where the singleton and observable design pattern becomes important.\n Let's imagine if you are in the arcade and there is a Lucky Dip Machine. The reason I like call it the LuckyDipMachine is because it is one of the feature assignments in the Programming Foundation Units in Monash University and it is often times made fun at. However, the solution for assignment itself can be engineered to be better.\n  There is only one Lucky Dip Machine in the arcade. This lucky dip machine has a limited number of items in its inventory. A singleton design pattern will be used to instantiate this class. The reason for a Singleton pattern is so that, there can only ever be one LuckyDipMachine. Multiple uses of the LuckyDipMachine will only deduct items from this instance.\n  Everyone in the arcade can observe when the LuckyDipMachine is used. Whenever, a price is won, the observers would know what Prize has been won.\n  graph TD A(LuckyDipMachine\nSingleton) B(ObserverOne) C(ObserverTWo) D(User) B -- observes-- A C -- observes-- A D -- uses -- A A --fire changes -- B A --fire changes -- C  We start off by creating a really simple Prize class.\npackage me.jianliew; public class Prize { private String name; public Prize(String name) { this.name = name; } public String getName() { return name; } public void setName(String name) { this.name = name; } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Prize prize = (Prize) o; return getName().equals(prize.getName()); } @Override public int hashCode() { return getName().hashCode(); } @Override public String toString() { return \u0026#34;Prize{\u0026#34; + \u0026#34;name=\u0026#39;\u0026#34; + name + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#39;}\u0026#39;; } } Our Prize class is just a plain old Java object.\nHowever, our LuckyDipMachine class is slightly more interesting. Here are the characteristics of it\n It has a private constructor. It has a static instance of itself. This is done as a class variable. A PropertyChangeSupport as a field to create an observable pattern. A pull method of the LuckyDipMachine indicating whenever the lucky dip machine has been pulled or used. When this happens, it will fire a property change done via calling the firePropertyChange method.  package me.jianliew; import java.beans.PropertyChangeListener; import java.beans.PropertyChangeSupport; import java.util.*; public class LuckyDipMachine { private Map\u0026lt;Prize, Integer\u0026gt; inventory; private static LuckyDipMachine ourInstance = new LuckyDipMachine(); // PropertyChangeSupport is introduced here  private PropertyChangeSupport support; public static LuckyDipMachine getInstance() { return ourInstance; } private LuckyDipMachine() { inventory = new HashMap\u0026lt;\u0026gt;(); support = new PropertyChangeSupport(this); fill(); } private void fill(){ Prize p1 = new Prize(\u0026#34;Potato\u0026#34;); Prize p2 = new Prize(\u0026#34;Tomato\u0026#34;); inventory.put(p1,2); inventory.put(p2,2); } public Prize getRandomPrize(){ List\u0026lt;Prize\u0026gt; keysAsArray = new ArrayList\u0026lt;\u0026gt;(inventory.keySet()); Random r = new Random(); return keysAsArray.get(r.nextInt(keysAsArray.size())); } public void pull(){ if (inventory.isEmpty()) return; Prize p = getRandomPrize(); inventory.computeIfPresent(p, (prize, integer) -\u0026gt; inventory.get(prize) - 1); if(inventory.get(p) == 0){ inventory.remove(p); } support.firePropertyChange(\u0026#34;prize\u0026#34;, \u0026#34;\u0026#34;, p); } public int getInventorySize() { int sum = 0; for (Prize p : inventory.keySet()) sum += inventory.get(p); return sum; } public void addPropertyChangeListener(PropertyChangeListener pcl) { support.addPropertyChangeListener(pcl); } public void removePropertyChangeListener(PropertyChangeListener pcl) { support.removePropertyChangeListener(pcl); } @Override public String toString() { return \u0026#34;LuckyDipMachine{\u0026#34; + \u0026#34;inventory=\u0026#34; + inventory + \u0026#39;}\u0026#39;; } } We also have the Observer. The only thing that is needed in this class is for it to implement the PropertyChangeListener. I will also need to have an implementation for the propertyChange.\npackage me.jianliew; import java.beans.PropertyChangeEvent; import java.beans.PropertyChangeListener; import java.util.ArrayList; import java.util.List; // It is needed to implement the interface PropertyChangeListener public class Observer implements PropertyChangeListener { private List\u0026lt;Prize\u0026gt; observedPrizes; public Observer(){ observedPrizes = new ArrayList\u0026lt;\u0026gt;(); } @Override public void propertyChange(PropertyChangeEvent propertyChangeEvent) { Prize p = (Prize) propertyChangeEvent.getNewValue(); this.observedPrizes.add(p); System.out.println(toString()); } @Override public String toString() { return \u0026#34;Observer{\u0026#34; + \u0026#34;observedPrizes=\u0026#34; + observedPrizes + \u0026#39;}\u0026#39;; } } package me.jianliew; public class Test { public static void main(String[] args) { Observer o = new Observer(); LuckyDipMachine ldm = LuckyDipMachine.getInstance(); ldm.addPropertyChangeListener(o); System.out.println(ldm.getInventorySize()); ldm.pull(); ldm.pull(); ldm.pull(); LuckyDipMachine ldm2= LuckyDipMachine.getInstance(); System.out.println(ldm2.getInventorySize()); ldm2.pull(); System.out.println(ldm.getInventorySize()); } } The output of it would be as follows.\n// There will be 4 items at the start 4 // On the first pull a random item is returned. The observer observes it. Observer{observedPrizes=[Prize{name=\u0026#39;Tomato\u0026#39;}]} // On the second pull, the observer now sees 2 items in total. Observer{observedPrizes=[Prize{name=\u0026#39;Tomato\u0026#39;}, Prize{name=\u0026#39;Potato\u0026#39;}]} // There will be three items on the third pull. Observer{observedPrizes=[Prize{name=\u0026#39;Tomato\u0026#39;}, Prize{name=\u0026#39;Potato\u0026#39;}, Prize{name=\u0026#39;Tomato\u0026#39;}]} // The second instance of the LuckyDipMachine will still only have 1 item as the LuckyDipMachine is a singleton. 1 // The pull of the second lucky dip machine, still triggers a fire to the observer as it is a singleton. There is no need to register the listener again. Observer{observedPrizes=[Prize{name=\u0026#39;Tomato\u0026#39;}, Prize{name=\u0026#39;Potato\u0026#39;}, Prize{name=\u0026#39;Tomato\u0026#39;}, Prize{name=\u0026#39;Potato\u0026#39;}]} // At the end there will be nothing left in the machine. 0 Lessons from this blog post.  It is very important to override both the equals and the hashCode when using maps. The Singleton design pattern have many different approaches. The approach which I have used here is the most simplistic approach and does have certain design concerns. Design is still very subjective matter as it is debatable to put the quantity field in the Prize class itself. The runtime to get a random item from a HashMap would depend on the implementation of it. Pygments and Chroma of the Hugo static website generator are both good but Chroma seems to look nice out of the box for my use case. PropertyChangeSupport is so much easier to use compare to the Observable interface class. computeIfPresent method is pretty cool as it uses a lambda like feature.  References  quantities, I. and L., E. (2019). Inventory of objects with item types and quantities. [online] Code Review Stack Exchange. Available at: https://codereview.stackexchange.com/questions/148821/inventory-of-objects-with-item-types-and-quantities [Accessed 3 Nov. 2019]. Baeldung. (2019). Singletons in Java | Baeldung. [online] Available at: https://www.baeldung.com/java-singleton [Accessed 3 Nov. 2019]. Baeldung. (2019). The Observer Pattern in Java | Baeldung. [online] Available at: https://www.baeldung.com/java-observer-pattern [Accessed 3 Nov. 2019].  "},{"uri":"https://jianliew.me/blog/entries/2019-11/javascriptsort/","title":"JavaScript Sort Stability","tags":["Sort","JavaScript","ES6"],"description":"","content":" Sorting is important. Sorting in JavaScript can be quirky. This blog post will be regarding a recent post made by the v8 team regarding the Array.prototype.sort.\n This blog post will demonstrate an example where the stability of a sort becomes important. This situation is normally known as the two-pass sorting, which is a technique commonly used sort two columns. In other words, I would like to use one function to sort one column first and then another function to sort another column. This is different in comparison to having a single function that sorts two columns in a single pass. Hence, with a two-pass, two different functions will be used for sorting instead of a call to a single function. (This would apply for two or more passes as well, otherwise known as a chain.)\nJavaScript implementation of sort is not stable.\n graph LR S(Start) SBN[sortByName] SRS[sortByScore] E(End) S -- SBN SBN -- SRS SRS -- E  graph LR S(Start) SBB[sortByName and sortByScore] E(End) S -- SBB SBB -- E  Let's have a look at a JavaScript example below.\nconst sortExample = () =\u0026gt; { const students = [ { name: \u0026#34;Charlie Doe\u0026#34;, score: 50 }, { name: \u0026#34;Alex Smith\u0026#34;, score: 60 }, { name: \u0026#34;Alex Doe\u0026#34;, score: 60 }, { name: \u0026#34;Drew Doe\u0026#34;, score: 50 }, { name: \u0026#34;Taylor Doe\u0026#34;, score: 50 }, { name: \u0026#34;Jordan Doe\u0026#34;, score: 55 }, { name: \u0026#34;Blake Doe\u0026#34;, score: 50 } ]; const sortByScore = students =\u0026gt; students.sort((a, b) =\u0026gt; b.score - a.score); const sortByName = students =\u0026gt; students.sort((a, b) =\u0026gt; (\u0026#34;\u0026#34; + a.name).localeCompare(b.name)); sortByName(students); console.log(JSON.parse(JSON.stringify(students))); sortByScore(students); console.log(JSON.parse(JSON.stringify(students))); }; sortExample(); In this example, I have two functions one of them sortByScore and another sortByName. Each of them would work individually and let's assume that test cases have been written for them. So what I would do is, I would use sortByName first. After, it is completed, I would then use sortByScore. I would expect my results to be sorted by the score but ordered based on the alphabetical order as I have already sorted by their names.\nHowever, this will only be the case if, the sort is stable. If the sort is not stable, the final results might not be in alphabetical order for the same scores.\nThe output for the sortByName.\n0: {name: \u0026#34;Alex Doe\u0026#34;, score: 60} 1: {name: \u0026#34;Alex Smith\u0026#34;, score: 60} 2: {name: \u0026#34;Blake Doe\u0026#34;, score: 50} 3: {name: \u0026#34;Charlie Doe\u0026#34;, score: 50} 4: {name: \u0026#34;Drew Doe\u0026#34;, score: 50} 5: {name: \u0026#34;Jordan Doe\u0026#34;, score: 55} 6: {name: \u0026#34;Taylor Doe\u0026#34;, score: 50} Notice that in this output, the array is sorted by their names.\nWe will now sort the entries by the score by using the same function on the array using the sortByScore function.\n0: {name: \u0026#34;Alex Doe\u0026#34;, score: 60} 1: {name: \u0026#34;Alex Smith\u0026#34;, score: 60} 2: {name: \u0026#34;Jordan Doe\u0026#34;, score: 55} 3: {name: \u0026#34;Blake Doe\u0026#34;, score: 50} 😄 4: {name: \u0026#34;Charlie Doe\u0026#34;, score: 50}😄 5: {name: \u0026#34;Drew Doe\u0026#34;, score: 50} 😄 6: {name: \u0026#34;Taylor Doe\u0026#34;, score: 50} 😄 A stable sort will return the entries in the order they would appear in the original array. If the sorting algorithm used is not stable, an outcome that could happen from the sortByScore can be something like the following.\n0: {name: \u0026#34;Alex Doe\u0026#34;, score: 60} 1: {name: \u0026#34;Alex Smith\u0026#34;, score: 60} 2: {name: \u0026#34;Jordan Doe\u0026#34;, score: 55} 3: {name: \u0026#34;Charlie Doe\u0026#34;, score: 50} 😓 4: {name: \u0026#34;Blake Doe\u0026#34;, score: 50} 😓 5: {name: \u0026#34;Drew Doe\u0026#34;, score: 50} 😄 6: {name: \u0026#34;Taylor Doe\u0026#34;, score: 50} 😄 Here the entries Charlie Doe and Blake Doe has been swapped. This is not the intended result from the sorting algorithm as the sort itself is not stable.\nOf course, I could rewrite the sort to be a single pass by using. However, this single pass sort function is still not stable because of the implementation of the sorting algorithm in which JavaScript uses. However, it does fit for my specific use case.\nconst sortByScoreThenName = students =\u0026gt; students.sort((a, b) =\u0026gt; { if (b.score \u0026gt; a.score) return 1; if (b.score \u0026lt; a.score) return -1; if (b.score == a.score) return (\u0026#34;\u0026#34; + a.name).localeCompare(b.name); }); But the main objective of this blog post is to describe a situation where the stability of the sort becomes important. In short, the stability of a sort matters when there is a need for the list or array to be chained through multiple conditions.\nThe take away message from this blog post is  JavaScript sort is not stable.  The stability of a sort matters when there is a need to chain sorts.   Lessons from this blog post.  JavaScript String sort can be easily done using localeCompare. Console.log uses reference. (Once again, so it is much better to Stringify it) Safari no longer support Windows. (I wonder how long ago it ended support for Windows) V8 is an amazing engine.  References  V8.dev. (2019). Stable Array.prototype.sort · V8. [online] Available at: https://v8.dev/features/stable-sort [Accessed 3 Nov. 2019]. stable?, W., Brunell, M., Robinson, A., Koberg, J. and Carter, J. (2019). What is the benefit for a sort algorithm to be stable?. [online] Stack Overflow. Available at: https://stackoverflow.com/questions/808617/what-is-the-benefit-for-a-sort-algorithm-to-be-stable [Accessed 3 Nov. 2019].  "},{"uri":"https://jianliew.me/blog/entries/2019-11/","title":"November 2019","tags":[],"description":"","content":"Summary of November Learning Experience Empty :(\n"},{"uri":"https://jianliew.me/blog/archive/2019-10/","title":"October 2019","tags":[],"description":"","content":"Summary of October Learning Experience   The learning curve of d3.js is higher than expected. Most people would just commonly find an example online and tailor it to suit their needs.\n  d3 heavily relies on rendering svg elements and understanding \u0026ldquo;d\u0026rdquo;, \u0026ldquo;g\u0026rdquo;,\u0026rdquo; paths\u0026rdquo; and a lot of other things.\n  Most newer d3 APIs would provide a \u0026ldquo;render\u0026rdquo; function that simplies the rendering of shapes.\n  JSONP using Ajax is old and should not be used, Fetch should be used instead.\n  Generating word clouds does not mean the word cloud is meaningful.\n  Getting the number of time a word appears does not have an impact to the semantic meaning of the events that occur daily.\n  Raspiberry PI is easier to used in comparison to \u0026ldquo;last time\u0026rdquo;.\n  OpenCV libraries are much cleaner now instead of the days where are \u0026ldquo;many\u0026rdquo; compile warnings.\n  You could not push a \u0026ldquo;BLOB\u0026rdquo; into FireStore but it is easily solved with a String.\n  A lot of people do not understand the importance of a date data type.\n  "},{"uri":"https://jianliew.me/blog/entries/","title":"Blog","tags":[],"description":"","content":"This blog is mainly about programming. It will also attempt document various thought process to achieve the desired outcome.\n"},{"uri":"https://jianliew.me/blog/entries/2019-11/minmax/","title":"Min and Max value of an Array (Java)","tags":["Sort","Java","Streams"],"description":"","content":" There are many ways to obtain the min and maximum value of items inside of an Array. This blog post will show case its many ways.\n The most basic way to do this is to loop through the entire array manually. The benefit of doing it this way, is that it just relies on the standard library and can be easily rewritten to an even simpler form. This way uses the Math.max and Math.min method. It will also, store the min value as the Integer.MAX_VALUE as the initial value and vice versa. One other way to do it would be to keep the first index as the minimum and maximum value. So, instead of using Integer.MAX_VALUE and Integer.MIN_VALUE, the values for min and max would be numbers[0] instead.\npublic void usingManual(int[] numbers){ if (numbers.length == 0) throw new IllegalArgumentException(\u0026#34;Invalid array\u0026#34;); int min = Integer.MAX_VALUE; int max = Integer.MIN_VALUE; for(int value : numbers){ if (value \u0026gt; max) max = Math.max(max, value); if (value \u0026lt; min) min = Math.min(min, value); } System.out.println(\u0026#34;Min is \u0026#34; + min); System.out.println(\u0026#34;Max is \u0026#34; + max); } Another way would be to sort the array. The first index would be the least and the last index would be the maximum. This is easily done using the Array.sort method. The issue with this way is that it would sort the array in place and it also rely on the inbuilt sort method. It is generally a bad idea to use a sort in a method you want to obtain the minimum and maximum because users of this method would not expect this method to be sorting the array itself. Thus, it is better to create a clone of it or a copy of the numbers array itself so that you do not sort the elements in place but sort the cloned array instead. It is also interesting to take note that the default implementation of the sorting algorithm uses a Dual-Pivot Quicksort.\nIt is a good idea to do a clone on the array and save it into another variable. The reason for this is because, users of the method does not expect it for you to sort their array when the method is used. A method at the end of the day should only do a single thing.\n public void usingSort(int[] numbers){ if (numbers.length == 0) throw new IllegalArgumentException(\u0026#34;Invalid array\u0026#34;); int[] clonedArray = numbers.clone(); Arrays.sort(clonedArray); System.out.println(\u0026#34;Min is \u0026#34; + clonedArray[0]); System.out.println(\u0026#34;Max is \u0026#34; + clonedArray[clonedArray.length - 1]); } You can also use a stream as well. However, it is only available in later versions of Java. The IntStream is only available since Java 1.8 and considerations need to be taken into account when using it. Here, there are is a need to decide if a parallel stream should be used as well.\npublic void usingIntStream(int[] numbers){ if (numbers.length == 0) throw new IllegalArgumentException(\u0026#34;Invalid array\u0026#34;); IntStream intStream = Arrays.stream(numbers); System.out.println(\u0026#34;Min is \u0026#34; + intStream.min()); System.out.println(\u0026#34;Max is \u0026#34; + intStream.max()); } Another way to do it is using the summaryStatistics of the int stream class. This is basically a state object for collecting statistics such as count, min max, sum and average. This would potentially be one of the better ways. This reason it is probably one of the better ways is because the IntSummaryStatistics is able to store other information as well besides the min and max, thus increasing its re-usability. So, there is no need for the iteration of the array itself again.\npublic void usingSummaryStats(int[] numbers){ if (numbers.length == 0) throw new IllegalArgumentException(\u0026#34;Invalid array\u0026#34;); IntSummaryStatistics stats = Arrays.stream(numbers).summaryStatistics(); System.out.println(\u0026#34;Min is \u0026#34; + stats.getMin()); System.out.println(\u0026#34;Max is \u0026#34; + stats.getMax()); } Using the IntSummaryStatistics way is probably the preferred way if you are running Java 8 and above.\n Finally, you can also use a Collections class to do it. However, in order to do so, you must box the primitive values into their class equivalent. It is important to know that this method iterates over the entire collection, hence it requires time proportional to the size of the collection.\npublic void usingCollections(int[] numbers){ if (numbers.length == 0) throw new IllegalArgumentException(\u0026#34;Invalid array\u0026#34;); List\u0026lt;Integer\u0026gt; integerList = new ArrayList\u0026lt;\u0026gt;(); Arrays.stream(numbers).forEach(value -\u0026gt; integerList.add(value)); System.out.println(Collections.min(integerList)); System.out.println(Collections.max(integerList)); } Finally, you can also use the Guava library to do it.\nSummary There are many ways to obtain the min and max of an array in Java. My personal preference is that, if you are using Java 8 or higher, it would better to use the IntSummaryStatistics method, otherwise the classical way where a loop is written would be preferred. Besides that, it is also not a very good idea for your method to do two things, thus it would be better to introduce two methods instead, but if you are using the IntSummaryStatistics method, you can avoid these needless complexities.\n"},{"uri":"https://jianliew.me/blog/entries/2019-11/programmingtoaninterface/","title":"Programming to an Interface (Java)","tags":["Java","Design Pattern","Interface"],"description":"","content":"Introduction A question that often arises is, what is the benefit of programming to an interface? This blog post will attempt to explain why. It is quite common for people to have heard of the term but do not really understand the significance of it.\n The Fallacy It is important to understand that the interface word used here is actually the broader concept of what an interface is, it does not mean the Java Interface. This post however aims to use Java as an example. The main objective of programming to an interface would be to loosen coupling.\nThe Declaration The most commonly used example is as follows. Notice that in this example, the LHS (Left hand side), is using List while the RHS (Right hand side) is specifying it to be ArrayList. Here, I am trying to create a List of Strings.\nList\u0026lt;String\u0026gt; usingList = new ArrayList\u0026lt;\u0026gt;(); ArrayList\u0026lt;String\u0026gt; usingArrayList = new ArrayList\u0026lt;\u0026gt;(); Notice that in declaration 2, the LHS is using ArrayList instead of the List. One of the biggest difference is that by the first declaration using List on the LHS. By using this way (Declaration 1), you are ensuring that you only call methods defined by the List instead of ArrayList specific methods. There are a few ArrayList specific methods like trimToSize and ensureCapacity. Generally declaration 2 should be avoided.\n// trimToSize method cannot be resolved usingList.trimtoSize(); // trimToSize method can be resolved usingArrayList.trimToSize(); // ensureCapacity method cannot be resolved usingList.ensureCapacity(); // ensureCapacity can be resolved usingArrayList.ensureCapacity(); To be brief, declaration 1 using List will allow the user to only use methods defined in the List interface, declaration 2 will allow users to use methods specific to the ArrayList class which includes trimToSize and ensureCapacity. It might not be very obvious when dealing with a class like the ArrayList but it is more evident if the class is a LinkedList instead. There is a big difference in the underlying implementation of the ArrayList and the LinkedList. An ArrayList is essentially an array where else a LinkedList is implemented as a double linked list.\nThe main idea here is that by using Declaration 1, it will allow developers to easily change the specific data structure used without causing massive changes in the code base if at a later stage you decided to change the ArrayList to a LinkedList instead. In fact, perhaps using a TreeList.\n// Using a List on the LHS List\u0026lt;String\u0026gt; usingList = new ArrayList\u0026lt;\u0026gt;(); // The process of using a LinkedList instead of an ArrayList can easily be done. List\u0026lt;String\u0026gt; usingList = new LinkedList\u0026lt;\u0026gt;(); // In fact, you can just use the TreeList library from the ApacheCommons List\u0026lt;String\u0026gt; usingList = new TreeList\u0026lt;\u0026gt;(); When using List it is important to decide which implementation of List to use. Each implementation like ArrayList or LinkedList are suited for different use cases.\n It is also important to understand the difference in the implementation of the ArrayList, LinkedList and TreeList as mentioned earlier. If you are interested in the internal workings, they can be found by referring to the OpenJDK implementation of the ArrayList located here and the LinkedList which can be found here.\npublic class ArrayList\u0026lt;E\u0026gt; extends AbstractList\u0026lt;E\u0026gt; implements List\u0026lt;E\u0026gt;, RandomAccess, Cloneable, java.io.Serializable { private static final long serialVersionUID = 8683452581122892189L; private static final int DEFAULT_CAPACITY = 10; // Notice that the underlying implementation of the ArrayList uses an Object[] //which is essentially a fixed sized array.  private static final Object[] EMPTY_ELEMENTDATA = {}; private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {}; //....omitted } public class LinkedList\u0026lt;E\u0026gt; extends AbstractSequentialList\u0026lt;E\u0026gt; implements List\u0026lt;E\u0026gt;, Deque\u0026lt;E\u0026gt;, Cloneable, java.io.Serializable { transient int size = 0; // Notice that it is using a Node here  transient Node\u0026lt;E\u0026gt; first; transient Node\u0026lt;E\u0026gt; last; //...omitted  private static class Node\u0026lt;E\u0026gt; { E item; Node\u0026lt;E\u0026gt; next; Node\u0026lt;E\u0026gt; prev; Node(Node\u0026lt;E\u0026gt; prev, E element, Node\u0026lt;E\u0026gt; next) { this.item = element; this.next = next; this.prev = prev; } } //...omitted } Based on the two snippets, it can be seen that the underlying implementation of both of the ArrayList and LinkedList are different, however they still have implementations of all methods that exist within the List interface itself. The ArrayList uses a fixed sized array as its implementation while the LinkedList uses a node that has a next and previous.\nWhen following the notion of programming to an interface there is still a need to determine the correct implementation to use as ArrayList and LinkedList have different run time complexity when adding and removing elements.\n Summary  It is good idea to always have the LHS (Left hand side) to use List. ArrayList and LinkedList are very different in terms of their internal implementation.  "},{"uri":"https://jianliew.me/blog/entries/2019-11/foreignkeys/","title":"Foreign Key Constraint","tags":["Foreign Key","SQL","Database","CQRS"],"description":"","content":"Introduction The motivation for this blog entry is the following post on Hacker News titled \u0026ldquo;Thoughts on Foreign Key\u0026rdquo;. Link here\n In the post, it is mentioned that \u0026ldquo;At GitHub we do not use foreign keys, ever, anywhere.\u0026quot;. This post is actually made by Shlomi Noach, who a principal Software Engineer at Github. Please do note that the post is actually dated Dec 10, 2016, this is about 3 years ago. And of course Github runs a RDMS instead of a NoSQL in that context.\nBased on the post it can be seen that the main reasons for not using FKs are as follows (as mentioned by Shlomi)\n  FKs are in your way to shard your database. Your app is accustomed to rely on FK to maintain integrity, instead of doing it on its own. It may even rely on FK to cascade deletes (shudder). When eventually you want to shard or extract data out, you need to change \u0026amp; test the app to an unknown extent.\n  FKs are a performance impact. The fact they require indexes is likely fine, since those indexes are needed anyhow. But the lookup made for each insert/delete is an overhead.\n  FKs don't work well with online schema migrations.\n  Shlomi also said the following\n Let's say you have two tables, P \u0026amp; C, standing for Parent \u0026amp; Child, respectively. There's a foreign key in C such that each row in C points to some \u0026ldquo;parent\u0026rdquo; value in P.\nDoing schema migration of C is possible. However since foreign keys have unique names, the new (migrated) C table will have a FK with a different name than the original one.\nDoing schema migration of P is just not going to work. Recall that gh-ost renames the table at the end. Alas, when renaming a table away, the FK will move with the renamed table. To create a parent-side FK on the ghost table, one would need to migrate C ; and because gh-ost uses async approach, P and P-ghost are never in complete sync at any point in time (except at lock time) which makes it impossible for C to have both a FK to P and to P-ghost. some integrity will be broken.\n The Context and Definition Before we go bonkers, it is important to understand the context of the post itself. When talking about Foreign Keys, it is also good to understand there are two definitions of what a Foreign Key is.\n  (Definition 1) - A foreign key joins a table to another table by referencing its primary key.\n  (Defintion 2) - A foreign key constraint specifies that the key can only contain values that are in the referenced primary key, and thus ensures the referential integrity of data that is joined on the two keys.\n  In this context, Shlomi is actually referring to the foreign key constraint.. Judging by the looks, it seems that the application code itself would be responsible for enforcing these constraints. Perhaps, using the CQRS pattern? More information regarding the CQRS pattern can be found here. The main issue with handling the FK constraint in application code is numerous as there is a need to think of situations where you would like a DELETE CASCADE and situations win which you do not.\nIt can be said that it is very hard to manage foreign key constraints via application code itself.\nWait! There is also a need to understand the context in where Shlomi is referring and more importantly scale in which is at hand.\n In order to understand why this is interesting, there are a few concepts we must first look into. There are two theorems at work here, the ACID \u0026amp; CAP theorem.\nACID vs CAP The ACID theorem is probably the most well known theorem.\n   Acronym Meaning     Atomicity An atomic transaction is an indivisible and irreducible series of database operations such that either all occur, or nothing occurs.   Consistency The guarantee that operations in transactions are performed accurately, correctly, and with validity, with respect to application semantics.   Isolation Determines how transaction integrity is visible to other users and systems.   Durability Guarantees that transactions that have committed will survive permanently.       Acronym Meaning     Consistency is a consistency model used in distributed computing to achieve high availability that informally guarantees that, if no new updates are made to a given data item, eventually all accesses to that item will return the last updated value.   Availability Every request receives a (non-error) response, without the guarantee that it contains the most recent write   Partition tolerance The system continues to operate despite an arbitrary number of messages being dropped (or delayed) by the network between nodes    The CAP theorem is slightly more interesting because it is said that it is impossible for a a distributed data store to simultaneously provide more than out of the three guarantees. However, the CAP theorem is often misunderstood as it is assumed that there is need to pick two out of the three however, this is not the case. The CAP theorem semantically means one cannot have 3 out of 3 guarantees at all times. But the main idea here is that there is a difference between the ACID theorm and CAP theorem, ACID would address the data consistency of an individual node where else the CAP theorem would address the cluster-wide data consistency. So, the CAP theorem plays a more importantly role when there is talk about scalability.\nThe ACID theorem applies on an individual node, the CAP is for cluster-wide data consistency.\n In short, the post is also talking about scaling as well. So, when scaling relational data, sharding would come into the picture as well. With the presence of FKs, the process of sharding, becomes more complicated. From my personal experience, I notice that it is quite common for developers to always drop FK constraints when attempting to do schema migrations but the main key point here is that the migrations mentioned above are done online. Thus, migrations are done without down time.\nBut\u0026hellip;..\nAt the end of the day, FK constraints are very important if your company does not operate at the scale in which GitHub operates. It is their design decision to not use FK constraints but every company and their use cases are different.\nMost companies do not operate at the scale where there is a need to drop FK constraints. Dropping FK constraints are meant for very specific use cases and architectural designs. Even if these constraints are dropped, there is still a need to enforce them at the application level. It is also important to decide which database is more suited for your use case as well.\n References   https://www.tutorialspoint.com/sql/sql-foreign-key.htm\n  https://www.vertica.com/docs/9.2.x/HTML/Content/Authoring/AdministratorsGuide/Constraints/ConstraintTypes/ForeignKeyConstraints.htm?TocPath=Administrator%27s%20Guide%7CConstraints%7CSupported%20Constraints%7C_____2\n  https://dba.stackexchange.com/questions/31260/consistency-in-acid-and-cap-theorem-are-they-the-same\n  https://news.ycombinator.com/item?id=21486494\n  https://stackoverflow.com/questions/7713049/read-locks-and-write-locks\n  "},{"uri":"https://jianliew.me/blog/archive/2019-10/percentage/","title":"Reddit Chart","tags":["Reddit","Chart","Visualisation"],"description":"","content":"The charts here are visualisation of the AmIthea-hole subreddit which can be found here\nThe reason this post is made, is so that it would easier to see the percentage of votes of a certain type.\nPlease note that the posts here are generated based on the Reddit website by doing GET requests. So, it is based on their current entries.\n    Abbreviation Meaning     YTA You're the A-hole   NTA Not the A-hole   ESH Everyone sucks here   NAH No A-holes here   INFO Not Enough Info    Posts "},{"uri":"https://jianliew.me/blog/archive/2019-10/programmming/","title":"Reddit Word Cloud ","tags":["Reddit","Chart","Visualisation"],"description":"","content":"The word cloud generated here is based on the \u0026lt;strong\u0026gt;/r/programming\u0026lt;/strong\u0026gt; subreddit for reddit.com The reason this post is made, is so that it would easier to see the word that appeared the most for the day. Even though the use of a word cloud is not exactly a good representation of occurrence, it still looks nice.  Please note that the posts here are generated based on the Reddit website by doing GET requests. So, it is based on their current entries. So, it will be refreshed when the page is reloaded.\n   "},{"uri":"https://jianliew.me/blog/archive/2019-10/hk/","title":"Sentiment Analysis","tags":["Reddit","Chart","Visualisation","Hong Kong","Percentage"],"description":"","content":"Sentiment Analysis for the Sub-Reddit \u0026ldquo;HongKong\u0026rdquo; This post will perform sentiment analysis using AFINN. AFINN is a list of words rated for valence rated with an integer between minus five(negative) and plus five (positive). This implementation uses AFINN-en-165. 1This approach however is a very naive approach as it does not build any models to determine the context of the usage of the word itself.\nPlease note that the posts here are generated based on the Reddit website by doing GET requests. So, it is based on their current entries. So, it will be refreshed when the page is reloaded.\n References 1. AFINN Sentiment Analysis\n"},{"uri":"https://jianliew.me/blog/archive/2019-10/topstories/","title":"Hacker News Word Cloud ","tags":["Hacker News","Chart","Visualisation"],"description":"","content":"The word cloud generated here is based on the website hacker news. The reason this post is made, is so that it would easier to see the word that appeared the most for the day. Even though the use of a word cloud is not exactly a good representation of occurrence, it still looks nice.  Please note that the posts here are generated based on the Hacker News API by doing GET requests. So, it is based on their current entries. So, it will be refreshed when the page is reloaded.\n   "},{"uri":"https://jianliew.me/blog/archive/2019-10/ga/","title":"Genetic Algorithm","tags":["Genetic Algorithm","Selection","Cross Over","Phrase Solver"],"description":"","content":"This post is a simple implementation of Genetic Algorithm GA.Here, you would start with a random string and end up with the target string.\n This post is heavily inspired based on this website. However, I created the codes with a very different methodology to also include newer JavaScript methods like using classes and etc.\nRunLessons from this post   The web worker is often times cached for a longer period in production/live environments. Users would have a better experience if it is not required for them to do a hard refresh on the browsers. One easy way is to use the best practice to load the web worker in the head. Others suggested to versioning web-workers.\n  The web worker at times, does not like while loops. It would be better if for loops are used instead.\n  The cross over methodology for GA needs to be implemented with complexity in mind.\n  Using jQuery might not be the best idea as the hide() and show() which manipulates the display either changing to none or block does not work well on mobile browsers. Perhaps not using jQuery would be better.\n  Designing an encoding is very important. For example, in a knapsack problem there are only two choices. So, each item can either be true or false.\n  References  Python Easy GA  "},{"uri":"https://jianliew.me/blog/archive/2019-10/tsp/","title":"TSP using GA","tags":["Genetic Algorithm","Selection","Cross Over","TSP"],"description":"","content":"This post uses GA to generate a high quality solution of the Travelling Salesman Problem.\n Travelling Salesman Problem using Genetic Algorithm This blog post is regarding using genetic algorithm to solve the Travelling Salesman Problem. In a one liner the TSP asks the following question: Given a list of cities and the distances between each pair of the cities, what is the shortest possible route that visits each city and returns to the origin city?\u0026quot;\nThe conditions in this scenario are that no point can be visited twice and it must return to the starting point. The selected starting point here is New York. (The starting point does not really matter in this scenario.). There are times however, that a point maybe the revisited more than once in order to achieve a better solution. The number of cities in this scenario is 13. In this specific implementation, it will never visit the same city twice.\nThe inspiration for this post is based on the google OR-Tools found here. This blog post, however uses Genetic Algorithm to obtain the answer. It is implemented with a web worker which runs in the browser based on JavaScript.\nI will also reuse the genetic algorithm implementation written for another blog post however with different fitness functions and different cross-over methodologies.\n   Location Coordinates Shorthand     New York 40, -74 A   Los Angeles 34, -118 B   Chicago 41, -87 C   Minneapolis 44, -93 D   Denver 39, -104 E   Dallas 32,-96 F   Seattle 47,-122 G   Boston 42,-71 H   San Francisco 37,-122 I   St. Louis 38,-90 J   Houston 29,-95 K   Phoenix 33,-111 L   Salt Lake City 40,-111 M    Total number of cities - 13.\nIn order to the Genetic Algorithm to work, a distance matrix needs to be given to it. This distance matrix is based on the \u0026ldquo;Euclidean Distance\u0026rdquo; and not Road Network distance. The distance matrix is obtained from here which has 13 cities in the United States.\nThe Genetic Algorithm Solution Lessons from this post   The earth is not flat! Mapping putting coordinates using latitude and longitude on a chart, it would work in a different way so it displays beautifully. Latitude and longitude needs to be swapped.\n  Most chart API do not let you specify both the x-axis and y-axis at the same time. This is especially true if the chart is able to generate SVG diagrams. SVG diagrams are always nicer and would generally be of more responsive nature at the end of the day.\n  You can use a series graph to draw lines from a point to point in the chartist API. However, chartist API does not like the situation where there are two values on the same axis. (So it is not able to draw a straight line on the x-axis because of the nature of a series chart. An example of this is where there is a point on 30,55 and 30,65.\n  There are specific data sets in which people benchmark their TSP solutions.\n  The GA will downgrade into a random search if the mutation rate is too high. However, the mutation rate can always be change to tailor to the specific use case.\n  "},{"uri":"https://jianliew.me/blog/archive/2019-10/promiseall/","title":"Promise All","tags":["JavaScript","Promise","API"],"description":"","content":" This post is a an entry to describe a use case when the Promise.all JavaScript method is needed. The official reference can be found here. This assumes that the reader has a basic understanding of how promises work.\n Before we start, there is a need to understand how certain RESTful services are structured. For example, the Hacker News API has the end point called topstories. This end point however, does not contain any other information besides a list of item IDs. So, if you would like to obtain the top 10 post including their title, there would be a need to do several GET request to fetch them all.\nThe code example below would demonstrate a situation where the Promise.all becomes useful.\nconst getTopStoriesId = () =\u0026gt; { let endPoint = \u0026#34;https://hacker-news.firebaseio.com/v0/topstories.json\u0026#34;; return fetch(endPoint, { mode: \u0026#34;cors\u0026#34; }).then((response) =\u0026gt; response.json()); }; const getItem = (itemNumber) =\u0026gt; { let endPoint = \u0026#34;//hacker-news.firebaseio.com/v0/item/\u0026#34; + itemNumber + \u0026#34;.json\u0026#34;; return fetch(endPoint, { mode: \u0026#34;cors\u0026#34; }).then((response) =\u0026gt; response.json()); } const topStories = () =\u0026gt; getTopStoriesId().then((result) =\u0026gt; { let promiseArray = []; result.forEach((element) =\u0026gt; { promiseArray.push(getItem(element)); }); return Promise.all(promiseArray); }); Flowchart Representation Lessons from this blog post.  The then function returns a promise as well. Fetch is significantly easier to use in comparison to its jQuery counterparts. However, considerations needs to be taken into account when using it in static sites that does not have Babel or modernizr. There are a lot of reasons a lot of users decided to create their own wrappers around the Hacker News API. Perhaps, it is deemed that their top stories and end up which does summary could be done in a different way. But HN itself is a very opinionated community. Mermaid diagrams are useful and break tags can be introduced in them. CORS and JSONP exist. Cors is more modern and easier to use compared to using JSONP. Using jQuery can make the codes very unreadable and creating call back hell easier.  References  https://stackoverflow.com/questions/38180080/when-to-use-promise-all    "},{"uri":"https://jianliew.me/blog/archive/2019-10/nearestneighbour/","title":"k-Nearest Neighbour on Maps","tags":[],"description":"","content":" One of the most common query when working with maps is the nearest neighbour query. This post will explain how to accomplish an easy nearest neighbour query.\n We will first start with a data set or coordinates.\nThe Nearest Neighbour Query on the map aims to return the nearest neighbour of a point. So, in the example, it can be seen that the 1st Nearest Neighbour of New York would be Boston and the 2nd Nearest Neighbour of New York Would be Chicago. This goes on for the k value. The interesting thing to remember is that the starting point of the query often times do not start from the set of existing points.\nWhat if we would like to query 20 nearest neighbour from a query point? This solution can easily be answered with a naive linear query if we do not have an existing data structure. Basically we can just calculate the distance from each point (each city) to our location to determine which ones are the nearest 20 points to us.\nHowever, in bigger applications where there would be more points (Think 1 million points), data structures like the R-tree would play a very important role to perform such queries. At the end of the day, it is important to understand that algorithms operate on data structures.\nThe naive solution would be to do something as follows. (Written in JavaScript)\nconst sortPointsBasedOnDistance = (queryPoint, points) =\u0026gt; { points.sort((pointA, pointB) =\u0026gt; { return ( calculateDistance(queryPoint, pointA) - calculateDistance(queryPoint, pointB) ); }); }; const calculateDistance = (startingPoint, endingPoint) =\u0026gt; { let x = endingPoint.x - startingPoint.x; let y = endingPoint.y - startingPoint.y; return Math.hypot(x, y); }; const createPoint = (name, x, y) =\u0026gt; ({ name: name, x: x, y: y }); let points = []; points.push( createPoint(\u0026#34;New York\u0026#34;, 40, -74), createPoint(\u0026#34;Chicago\u0026#34;, 41, -87), createPoint(\u0026#34;Minneapolis\u0026#34;, 44, -93), createPoint(\u0026#34;Boston\u0026#34;, 42, -71), createPoint(\u0026#34;Denver\u0026#34;, 39, 104), createPoint(\u0026#34;Dallas\u0026#34;, 32, -96) ); let queryPoint = createPoint(\u0026#34;Query Point\u0026#34;, 40, -74); sortPointsBasedOnDistance(queryPoint, points); console.log(points); Lessons from this blog post.  It is hard to explain a year longs\u0026rsquo; research in a single blog post. Console.log in JavaScript is passed a reference to the object, thus the value will actually change when the object changes. It is not the value of he object at the moment in time where you call console.log. There are not many existing libraries written in JavaScript that deals with these specialised queries. (Perhaps more investigation is needed) The sort function in JavaScript is an ES6 feature, careful consideration needs to be taken into account when using it and also be careful with the curly bracers and no curly bracers. Creating an object requires brackets \u0026ldquo;(\u0026rdquo; wrapped around \u0026ldquo;{\u0026rdquo; parenthesis.  "},{"uri":"https://jianliew.me/blog/archive/2019-10/java13/","title":"Java 13 on Ubuntu","tags":[],"description":"","content":"Installing Java 13 on Ubuntu is pretty simple.\nAll that was needed was\nsudo apt install openjdk-13-jdk sudo update-alternatives --config java Of course, it would be better if you are on the latest version of Ubuntu so that the apt actually finds it there. (I am currently using Ubuntu 19.04). You can obtain this information by\nlsb_release -a After that, all that was needed was to properly configure the Java path where you can easily find where it is from doing\nsudo update-alternatives --config java Please do note that using the which java and using that path does not work as it is not the SDK.\n"},{"uri":"https://jianliew.me/blog/archive/2019-10/voronoi/","title":"Voronoi Diagram","tags":["Nearest Neighbour","Maps","Voronoi"],"description":"","content":"One of the most common query when working with maps is the nearest neighbour query. This blog post will use Voronoi Diagrams to explain more regarding the nearest neighbour query.\n Below is an example of a Voronoi diagram generated using d3.js. One of the good use case of a voronoi diagram in real life applications would be where would be finding a place to build emergency services. This place should have the most number of neighbouring regions. For example, if you click on the region in the voronoi diagram below, you can see how many regions in which it would consider this region to be its neighbour. The diagram is randomly generated based on a number of points and thus every refresh of this page will show a different voronoi diagram.\nThe codes to create this diagram are as follows :-\nconst createVoronoi = () =\u0026gt; { const width = 600; const height = 600; const vertices = d3.range(30).map(function(d) { return [Math.random() * width, Math.random() * height]; }); const delaunay = d3.Delaunay.from(vertices); const voronoi = delaunay.voronoi([0, 0, width, height]); let svg = d3 .select(\u0026#34;#canvas\u0026#34;) .append(\u0026#34;svg\u0026#34;) .attr(\u0026#34;viewBox\u0026#34;, `0 0 600 600`); const mesh = svg .append(\u0026#34;path\u0026#34;) .attr(\u0026#34;fill\u0026#34;, \u0026#34;none\u0026#34;) .attr(\u0026#34;stroke\u0026#34;, \u0026#34;#ccc\u0026#34;) .attr(\u0026#34;stroke-width\u0026#34;, 1) .attr(\u0026#34;d\u0026#34;, voronoi.render()); const bounds = svg .append(\u0026#34;path\u0026#34;) .attr(\u0026#34;fill\u0026#34;, \u0026#34;none\u0026#34;) .attr(\u0026#34;stroke\u0026#34;, \u0026#34;#ccc\u0026#34;) .attr(\u0026#34;stroke-width\u0026#34;, 1) .attr(\u0026#34;d\u0026#34;, voronoi.renderBounds()); const points = svg .append(\u0026#34;path\u0026#34;) .attr(\u0026#34;fill\u0026#34;, \u0026#34;black\u0026#34;) .attr(\u0026#34;stroke\u0026#34;, \u0026#34;#ccc\u0026#34;) .attr(\u0026#34;stroke-width\u0026#34;, 1) .attr(\u0026#34;d\u0026#34;, delaunay.renderPoints()); }; Example of a query I will now re-use my data set of point from an earlier blog entry and I will generate the voronoi diagram. Basically, I would use a query point as well to find out the nearest neighbour and the surrounding neighbours. The figure below shows that the d3-delaunay provides a simple functions that allows you to find the point in which is the closest to the query point. This is done by using delaunay.find(). So if you are inside the blue region, your closest point would be the point inside the blue region.\nIt's surrounding neighbours could then be easily obtained once you have this point by using delaunay.neighbor() and passing the result of the first find function. So, the regions which are in teal would be the neighbours of the region in blue. All the other regions would be coloured in green. This simple data structure would allow you to easily obtain the nearest neighbour. However, of course, there is also the importance of the build time, insertion time and removal time as well.\nThe codes to create this diagram are as follows const queryExample = () =\u0026gt; { let points = [ [40, 74], [34, 118], [41, 87], [44, 93], [39, 104], [32, 96], [47, 122], [42, 71] ]; // Function to transform the points so that it would work on the grid  const transform = point =\u0026gt; { return [(point[0] / 90) * 500, (point[1] / 180) * 500]; }; let transformed = []; points.forEach(element =\u0026gt; { transformed.push(transform(element)); }); const delaunay = d3.Delaunay.from(points); const voronoi = delaunay.voronoi([0, 0, 500, 500]); // Call the draw Voronoi function.  drawVoronoi(\u0026#34;#exampleQuery\u0026#34;, transformed); }; const drawVoronoi = (id, vertices, color) =\u0026gt; { const width = 500, height = 500; const delaunay = d3.Delaunay.from(vertices); const voronoi = delaunay.voronoi([0, 0, width, height]); let svg = d3 .select(id) .append(\u0026#34;svg\u0026#34;) .attr(\u0026#34;viewBox\u0026#34;, `0 0 500 500`); const mesh = svg .append(\u0026#34;path\u0026#34;) .attr(\u0026#34;fill\u0026#34;, \u0026#34;none\u0026#34;) .attr(\u0026#34;stroke\u0026#34;, \u0026#34;#ccc\u0026#34;) .attr(\u0026#34;stroke-width\u0026#34;, 1) .attr(\u0026#34;d\u0026#34;, voronoi.render()); const bounds = svg .append(\u0026#34;path\u0026#34;) .attr(\u0026#34;fill\u0026#34;, \u0026#34;none\u0026#34;) .attr(\u0026#34;stroke\u0026#34;, \u0026#34;#ccc\u0026#34;) .attr(\u0026#34;stroke-width\u0026#34;, 1) .attr(\u0026#34;d\u0026#34;, voronoi.renderBounds()); // Find the closest point to this coordinate.  const ans = delaunay.find(40, 73); const neighbours = delaunay.neighbors(ans); for (const iterator of neighbours) { renderCell(svg, voronoi, iterator, d3.schemeTableau10[3]); } renderCell(svg, voronoi, ans, d3.schemeTableau10[0]); const points = svg .append(\u0026#34;path\u0026#34;) .attr(\u0026#34;fill\u0026#34;, \u0026#34;black\u0026#34;) .attr(\u0026#34;stroke\u0026#34;, \u0026#34;#ccc\u0026#34;) .attr(\u0026#34;stroke-width\u0026#34;, 1) .attr(\u0026#34;d\u0026#34;, delaunay.renderPoints()); }; const renderCell = (svg, voronoi, index, color) =\u0026gt; { svg .append(\u0026#34;path\u0026#34;) .attr(\u0026#34;fill\u0026#34;, color) .attr(\u0026#34;stroke\u0026#34;, \u0026#34;#ccc\u0026#34;) .attr(\u0026#34;stroke-width\u0026#34;, 1) .attr(\u0026#34;d\u0026#34;, voronoi.renderCell(index)); }; Lessons from this blog post.  The learning curve for d3.js is pretty insane. Voronois are pretty easy using d3. Generators can be iterated using the for\u0026hellip;of construct. MDN link There is a way to make SVG responsive. Refer this post.  "},{"uri":"https://jianliew.me/blog/archive/","title":"Archive","tags":[],"description":"","content":"These are the previous blog post. "},{"uri":"https://jianliew.me/blog/","title":"Contents","tags":[],"description":"","content":"Hello! For the past 2.5 years, I have been working as a Teaching Associate with Monash University. I have taught both at the undergraduate level as well as postgraduate level. Overall, I have assisted over 100 students every semester to understand the course material and taught them how to apply critical thinking to every aspect of their studies.\nIt is my personal belief that, it is more important for a student to understand the underlying concepts before approaching a problem. Understanding how to solve a problem takes precedence over making the same mistakes over and over again just to see what will work.\nSubjects taught This is the list of the subjects that I have been involved in to date.\n   Unit Code Name Technology Stack     FIT1010 Introduction to Software Engineering Java7, Python 3, UML   FIT5032 Internet Applications Development ASP.NET MVC, C#, HTML5, JavaScript   FIT5042 Enterprise Application Development for the Web JEE, JSF, XHTML   FIT5120 Industry Experience Project Various Frameworks   FIT5136 Software Engineering Java7, UML   FIT5140 Advance Mobile Systems Swift, Python, RaspberryPi   FIT9131 Programming Foundations Java7   FIT9134 Computer Architecture and Operating Systems Shell Scripting, Bash, Ubuntu   FIT9135 Data Communications WireShark, Core Network Emulator    Nominations \u0026amp; Awards  Studio Mentor for FIT5120 Industry Experience Project. Worked closely with four teams of students to develop applications based on the suggestion of MYOB mentors. Teaching Excellence Nominee for multiple subjects.    "},{"uri":"https://jianliew.me/blog/tags/cqrs/","title":"CQRS","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/database/","title":"Database","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/foreign-key/","title":"Foreign Key","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/sql/","title":"SQL","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/","title":"Tags","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/design-pattern/","title":"Design Pattern","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/interface/","title":"Interface","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/java/","title":"Java","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/sort/","title":"Sort","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/streams/","title":"Streams","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/es6/","title":"ES6","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/javascript/","title":"JavaScript","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/observer/","title":"Observer","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/singleton/","title":"Singleton","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/api/","title":"API","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/promise/","title":"Promise","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/cross-over/","title":"Cross Over","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/genetic-algorithm/","title":"Genetic Algorithm","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/selection/","title":"Selection","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/tsp/","title":"TSP","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/phrase-solver/","title":"Phrase Solver","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/chart/","title":"Chart","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/hacker-news/","title":"Hacker News","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/visualisation/","title":"Visualisation","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/maps/","title":"Maps","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/nearest-neighbour/","title":"Nearest Neighbour","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/voronoi/","title":"Voronoi","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/hong-kong/","title":"Hong Kong","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/percentage/","title":"Percentage","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/reddit/","title":"Reddit","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/coding-style/","title":"Coding Style","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/swift/","title":"Swift","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/cv/","title":"Curriculum Vitae","tags":[],"description":"","content":"Summary A passionate educator and technology lover with excellent programming and communication skills. Organized and driven with the innate ability to stay on the task.\nTeaching Experience Monash University, Melbourne (April 2015 - Current) Sessional Lecturer \u0026amp; Teaching Associate (Sessional)\nSubjects previously taught includes:\n   Unit Code Name     FIT1010 Introduction to Software Engineering   FIT5032 Internet Applications Development   FIT5042 Enterprise Web Applications   FIT5120 Industry Experience Project   FIT5136 Software Engineering   FIT9131 Programming Foundations in Java   FIT9134 Computer Architecture and Operating Systems   FIT9135 Data Communications    Key responsibilities  Confidently assist students to become\tindependent\tand\tcollaborative learners during each studio session by encouraging participation as well as the motivation to\tlearn from each\tother. Provide laboratory instructions, accessing student performance, tutoring students and determining course grades by advising students to always understand the materials before approaching a problem scenario. Participate in examination markings and the evaluation of final grades of each student.  Achievements  Teaching Excellence Award Nominee for multiple subjects. Consistently achieving a Student Evaluation of Teaching and Units (SETU) score of 4 and above for each subject taught. Successfully mentored four teams to complete the industry experience project (FIT5120) subjects done in cooperation with Monash University and mentors from MYOB.  Education Master of Information Technology (Professional) - Monash University  Completed a thesis titled \u0026ldquo;Category R-tree\u0026rdquo; under the supervision of Assoc. Prof. David Taniar Faculty of Information Technology Merit Scholarship  Bachelor of Computer Science \u0026amp; Software Engineering - Swinburne University  Graduated with First Class Honors Swinburne University of Technology Merit Scholarship  "},{"uri":"https://jianliew.me/blog/tags/datetime/","title":"DateTime","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/tags/design/","title":"Design","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/disclaimer/","title":"Disclaimer","tags":[],"description":"","content":"This web site is not authorised by Monash University and that any opinions expressed on the pages are those of the author and not those of the University.\n"},{"uri":"https://jianliew.me/blog/tags/document-database/","title":"Document Database","tags":[],"description":"","content":""},{"uri":"https://jianliew.me/blog/timeline/","title":"Time Line","tags":[],"description":"","content":""}]