[
{
	"uri": "https://jianliew.me/blog/teaching/bashcommands/",
	"title": "Bash",
	"tags": [],
	"description": "",
	"content": " Command Line This blog post is under construction.\n The entries in this blog are based on materials for the Computer Architecture \u0026amp; Operating Systems Unit done at the Masters level.\nThis unit is not done in the traditional manner but it focuses heavily on understanding and using the command line.\nSince this unit will no longer be offered, this blog post will serve as a reminder what the basic commands taught in this unit.\n"
},
{
	"uri": "https://jianliew.me/blog/teaching/bashcommands/ls/",
	"title": "Basic commands",
	"tags": ["Shell", "Bash", "Command Line"],
	"description": "",
	"content": " This blog post is under construction.\n This blog entry assumes that the reader has a basic understanding of using the command line and would like to know more. (More specifically using the Bash shell on Ubuntu)\n The man pages There are several ways in which users obtain help. One of the most well known way would be to use the man pages. However, these days most people do not use the man pages anymore.\n$ man  The ls command List in long format all the files and directories in your home directory.\nAnswer\n$ ls -l  The main challenge of this question is so that students understand how to use the ls command.\nThere are several points to take note in this question. For example, what is the meaning of long format? What does it mean by all files and directories?\nOne interesting thing is that most people do not know that the ls command can actually be given a file.\nSo, the various accepted answers for this question are\n$ ls -l $ ls --all -l $ ls -al  List in long format all the files and directories (top-level only) in the /usr/local directory, sorted by the time of last modification.\nQuestion 3\nCreate the following directory structure.\ngraph TD S[ Your Home Directory ] A[ monash ] B[ personal ] C[ documents ] D[ data ] E[ temp ] F[ documents ] S -- A S -- B A -- C A -- D A -- E B -- F  In order to create the directory structure, there are several ways. One way to do is would be to use several mkdir commands.\n$ mkdir monash $ mkdir personal $ mkdir monash/documents $ mkdir monash/data $ mkdir monash/temp $ mkdir personal/documents  However, you can achieve the same result by using a single mkdir command. At the end of the day if you look at the manual for mkdir, it does mention that it can be used to create directories.\n$ mkdir -p monash personal monash/documents monash/data monash/temp personal/documents  Change into the ~/monash/temp directory. The special character ~ means \u0026ldquo;a shortcut to your home directory\u0026rdquo;\n"
},
{
	"uri": "https://jianliew.me/blog/blog/",
	"title": "Blog",
	"tags": [],
	"description": "",
	"content": " Blog This blog post is under construction.\n "
},
{
	"uri": "https://jianliew.me/blog/teaching/",
	"title": "Teaching",
	"tags": [],
	"description": "",
	"content": " Blog This blog post is under construction.\n "
},
{
	"uri": "https://jianliew.me/blog/teaching/uml/",
	"title": "UML",
	"tags": [],
	"description": "",
	"content": " Unified Modelling Language State Machines What are state machines?\ngraph LR A(Open) B(Close) A--B  "
},
{
	"uri": "https://jianliew.me/blog/teaching/uml/introduction/",
	"title": "What are State Machine Diagrams?",
	"tags": ["UML", "State Machine", "State Chart"],
	"description": "",
	"content": " Posted - Tue 8 Oct 07:49:09 AEDT 2019\nThis blog post is incomplete.\n This blog entry assumes that the reader has a basic understanding of UML diagrams and would wish to understand more regarding state machine diagrams.\n Introduction This article is written based on my teaching experiencing in Monash University Australia (Faculty of Information Technology) for the unit Software Engineering.\nOften times, one of the most misunderstood diagram in UML is the state machine. These are also called state charts at times, as we often use terms interchangeably. The semantical difference between two of these diagrams are miniscule at best.\n .cssClass  circle { fill:black !important; stroke:gray !important; stroke-width:3 !important; }  graph LR S(( )) A(Open) B(Close) E(( )) S--A A--B B--E style S fill:#000000 class E cssClass  A simple initial state chart for the state of a door.\nIn fact, for most people, UML is perceived to be something that is not very useful in the development world. The main reason, is because the lack of understanding how the diagrams would relate to a real world application. When I first learn about UML state machines, I often confuse it with other diagrams like the flow chart as well as the activity diagram. I would also question its usefulness. Over time, I realised that it is the most useful diagrams in UML. I would rank it second in terms of importance, the first spot being the class diagram itself.\nI will attempt to explain why in this blog post.\nRemember that at the end of the day, diagrams are very useful to gain a better understanding of the system. As the saying goes, a picture tells a thousand words. The very first thing to understand is that a state chart is a dynamic modelling technique. It focuses on identifying the behavior of your system, specific to instances of a single class. 1\nThe main keywords here are\n A Single Class Dynamic  Let\u0026rsquo;s try to understand these keywords in more details.\nA single class The key features of a state machine, is that it used to model a specific instance of a single class. This concept is at utmost importance when dealing with state diagrams. Not two classes, not three classes but a single class. Before we move on, lets see an example of a class diagram for now. Remember that normally the construction of a state diagram happens after the class diagram.\ngraph LR A[Student] B[Unit] A -- B  A simple class diagram. (Initial level)\nThe example above is a simplification of what a class diagram is at its very basic nature. Two classes, Student and Unit and the Student class using the Unit class.\npublic class Student { private String firstName; private String lastName; private Unit unit; // Other methods omitted.. }  public class Unit { private String name; private String description; // Other methods omitted.. }  So, where does the state machine come into the picture in this situation? Since the state machine diagram aims to model a single class. Which class would we model here? Do we model both of them or just one? The answer is pretty simple, we actually attempt to do a state chart of all of the classes.\nSince based on the diagram, the Student class is using the Unit class, we should start modelling the state chart from the Unit class. The very first steps when drawing the state machine diagram would be to list out all the possible states.\nRemember that the objective of modelling is always to understand the system in more detailed view. We would also like to understand requirements better. This can be achieved in real life by talking to the real clients and users. If it is a fictional scenario, assumptions would then be made.\n The more intellectually stimulating steps is probably where you list out the possible states in a state chart.\nSo, lets say the possible states of a Unit are\n Offered Not offered  graph LR S(( )) A(Offered) B(Not Offered) E(( )) S--A A--B B--E style S fill:#000000 class E cssClass  However, if you continue the thought process, there are probably more states which can only be derived by understanding the requirements further.\nFor example, if we apply the concept of 4W1H, we will attempt to understand more regarding the requirements itself.\n   Category Question     Who ?   Where ?   When ?   How ?    Dynamic One of the biggest difference regarding state diagrams in comparison to the other diagrams in UML is that it attempts to model the dynamic nature of a system. In comparison to the other diagrams, state machine diagrams can model something which is not captured by the class diagram, as well as the use case diagram.\nIt is very important to understand that over time, the state of a class changes. In the semantical sense, dynamic conveys the meaning of (of a process or system) characterised by constant change, activity, or progress.\ngraph LR S(( )) A(Offered) B(Not Offered) E(( )) S--A A--B B--E style S fill:#000000 class E cssClass  So, if we take a look at our current state chart, what we would like to know is, how does it shift from one state into another state.\nDiagrams P.S. - The real reason I wanted to make to blog post, is actually just to use mermaid diagrams.\nReferences 1. UML 2 State Machine Diagrams: An Agile Introduction\n"
},
{
	"uri": "https://jianliew.me/blog/teaching/uml/classdiagram/",
	"title": "What are Class Diagrams?",
	"tags": ["UML", "State Machine", "State Chart"],
	"description": "",
	"content": " This blog post is under construction.\n "
},
{
	"uri": "https://jianliew.me/blog/tags/bash/",
	"title": "Bash",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://jianliew.me/blog/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://jianliew.me/blog/tags/command-line/",
	"title": "Command Line",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://jianliew.me/blog/",
	"title": "Contents",
	"tags": [],
	"description": "",
	"content": " Hello! I am Jian.\nWelcome to my blog!\nFor the past 2.5 years, I have been working as a Teaching Associate with Monash University. I have taught both at the undergraduate level as well as postgraduate level. Overall, I have assisted over 100 students every semester to understand the course material and taught them how to apply critical thinking to every aspect of their studies.\nIt is my personal belief that, it is more important for a student to understand the underlying concepts before approaching a problem. Understanding how to solve a problem takes precedence over making the same mistakes over and over again just to see what will work.\nSubjects taught This is the list of the subjects that I have been involved in to date.\n   Unit Code Name Technology Stack     FIT1010 Introduction to Software Engineering Java7, Python 3, UML   FIT5032 Internet Applications Development ASP.NET MVC, C#, HTML5, JavaScript   FIT5042 Enterprise Application Development for the Web JEE, JSF, XHTML   FIT5120 Industry Experience Project Various Frameworks   FIT5136 Software Engineering Java7, UML   FIT5140 Advance Mobile Systems Swift, Python, RaspberryPi   FIT9131 Programming Foundations Java7   FIT9134 Computer Architecture and Operating Systems Shell Scripting, Bash, Ubuntu   FIT9135 Data Communications WireShark, Core Network Emulator    Nominations \u0026amp; Awards  Studio Mentor for FIT5120 Industry Experience Project. Worked closely with four teams of students to develop applications based on the suggestion of MYOB mentors. Teaching Excellence Nominee for multiple subjects.  "
},
{
	"uri": "https://jianliew.me/blog/cv/",
	"title": "Curriculum Vitae",
	"tags": [],
	"description": "",
	"content": " Summary A passionate educator and technology lover with excellent programming and communication skills. Organized and driven with the innate ability to stay on the task.\nTeaching Experience Monash University, Melbourne (April 2015 - Current) Sessional Lecturer \u0026amp; Teaching Associate (Sessional)\nSubjects previously taught includes:\n   Unit Code Name     FIT1010 Introduction to Software Engineering   FIT5032 Internet Applications Development   FIT5042 Enterprise Web Applications   FIT5120 Industry Experience Project   FIT5136 Software Engineering   FIT9131 Programming Foundations in Java   FIT9134 Computer Architecture and Operating Systems   FIT9135 Data Communications    Key responsibilities  Confidently assist students to become independent and collaborative learners during each studio session by encouraging participation as well as the motivation to learn from each other. Provide laboratory instructions, accessing student performance, tutoring students and determining course grades by advising students to always understand the materials before approaching a problem scenario. Participate in examination markings and the evaluation of final grades of each student.  Achievements  Teaching Excellence Award Nominee for multiple subjects. Consistently achieving a Student Evaluation of Teaching and Units (SETU) score of 4 and above for each subject taught. Successfully mentored four teams to complete the industry experience project (FIT5120) subjects done in cooperation with Monash University and mentors from MYOB.  Education Master of Information Technology (Professional) - Monash University  Completed a thesis titled \u0026ldquo;Category R-tree\u0026rdquo; under the supervision of Assoc. Prof. David Taniar Faculty of Information Technology Merit Scholarship  Bachelor of Computer Science \u0026amp; Software Engineering - Swinburne University  Graduated with First Class Honors Swinburne University of Technology Merit Scholarship  "
},
{
	"uri": "https://jianliew.me/blog/disclaimer/",
	"title": "Disclaimer",
	"tags": [],
	"description": "",
	"content": "This web site is not authorised by Monash University and that any opinions expressed on the pages are those of the author and not those of the University.\n"
},
{
	"uri": "https://jianliew.me/blog/tags/shell/",
	"title": "Shell",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://jianliew.me/blog/tags/state-chart/",
	"title": "State Chart",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://jianliew.me/blog/tags/state-machine/",
	"title": "State Machine",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://jianliew.me/blog/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://jianliew.me/blog/tags/uml/",
	"title": "UML",
	"tags": [],
	"description": "",
	"content": ""
}]