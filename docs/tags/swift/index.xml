<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Swift on Jian Liew</title><link>https://jianliew.me/blog/tags/swift/</link><description>Recent content in Swift on Jian Liew</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 01 Oct 2019 20:56:02 +1100</lastBuildDate><atom:link href="https://jianliew.me/blog/tags/swift/index.xml" rel="self" type="application/rss+xml"/><item><title>Explicit Else (Guard)</title><link>https://jianliew.me/blog/archive/2019-10/guard/</link><pubDate>Tue, 01 Oct 2019 20:56:02 +1100</pubDate><guid>https://jianliew.me/blog/archive/2019-10/guard/</guid><description>Before we start, lets take a look at the grammar of a guard statement for the Swift language.
Grammar of a Guard Statement
guard-statement &amp;ndash;&amp;gt; guard condition-list else code-block
This was a conversation I had with a co-worker a couple of days back. I asked him, what is this guard in Swift? I have not been programming in Swift since iOS development made a shift from Objective C to Swift and I have not seen a guard statement used in any other languages I programmed in.</description></item><item><title>Nested Data in Documents (FireStore)</title><link>https://jianliew.me/blog/entries/2019-11/firestore/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jianliew.me/blog/entries/2019-11/firestore/</guid><description>When using Google Firestore, there is a need to put some thought into the way the data is structure. Each option would have an advantage or limitations depending on the use case.
With JSON being everywhere, there are times when there is a need to figure out how to structure data in the Cloud Firestore.
Here are a few common options.
Nested data in documents Subcollections Root-level The most important thing to remember that there is no perfect solution for structuring a Cloud Firestore database.</description></item></channel></rss>