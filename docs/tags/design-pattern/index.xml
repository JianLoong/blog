<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Design Pattern on Jian Liew</title><link>https://jianliew.me/blog/tags/design-pattern/</link><description>Recent content in Design Pattern on Jian Liew</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 07 Nov 2019 00:00:00 +1100</lastBuildDate><atom:link href="https://jianliew.me/blog/tags/design-pattern/index.xml" rel="self" type="application/rss+xml"/><item><title>Singleton &amp; Observer Pattern (Java)</title><link>https://jianliew.me/blog/entries/2019-11/singletonobserverpattern/</link><pubDate>Sun, 03 Nov 2019 00:00:00 +1100</pubDate><guid>https://jianliew.me/blog/entries/2019-11/singletonobserverpattern/</guid><description>This blog post will demonstrate a simple use case where the singleton and observable design pattern becomes important.
Let&amp;rsquo;s imagine if you are in the arcade and there is a Lucky Dip Machine. The reason I like call it the LuckyDipMachine is because it is one of the feature assignments in the Programming Foundation Units in Monash University and it is often times made fun at. However, the solution for assignment itself can be engineered to be better.</description></item><item><title>Programming to an Interface (Java)</title><link>https://jianliew.me/blog/entries/2019-11/programmingtoaninterface/</link><pubDate>Thu, 07 Nov 2019 00:00:00 +1100</pubDate><guid>https://jianliew.me/blog/entries/2019-11/programmingtoaninterface/</guid><description>Introduction A question that often arises is, what is the benefit of programming to an interface? This blog post will attempt to explain why. It is quite common for people to have heard of the term but do not really understand the significance of it.
The Fallacy It is important to understand that the interface word used here is actually the broader concept of what an interface is, it does not mean the Java Interface.</description></item></channel></rss>