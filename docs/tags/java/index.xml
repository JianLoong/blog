<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on Jian Liew</title><link>https://jianliew.me/blog/tags/java/</link><description>Recent content in Java on Jian Liew</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://jianliew.me/blog/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Singleton &amp; Observer Pattern (Java)</title><link>https://jianliew.me/blog/blog/november-2019/singletonobserverpattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jianliew.me/blog/blog/november-2019/singletonobserverpattern/</guid><description>This blog post will demonstrate a simple use case where the singleton and observable design pattern becomes important.
Let&amp;rsquo;s imagine if you are in the arcade and there is a Lucky Dip Machine. The reason I call it the LuckyDipMachine is because it is one of the feature assignments in the Programming Foundation Units in Monash University and it is often times made fun at. However, the assignment itself can be engineered to be better.</description></item></channel></rss>